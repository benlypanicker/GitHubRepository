package com.example.rmtsampleflight.v1;
/*
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
*/

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.apache.http.message.BasicStatusLine;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;

import android.text.TextUtils;

import com.example.rmtsampleflight.ServiceVersionConfigurations;
import com.example.rmtsampleflight.v1.complextypes.FlightAvailability;
import com.example.rmtsampleflight.v1.complextypes.FlightDetails;
import com.example.rmtsampleflight.v1.entitytypes.Booking;
import com.example.rmtsampleflight.v1.entitytypes.Carrier;
import com.example.rmtsampleflight.v1.entitytypes.Flight;
import com.example.rmtsampleflight.v1.entitytypes.Subscription;
import com.example.rmtsampleflight.v1.entitytypes.Travelagency;
import com.example.rmtsampleflight.v1.helpers.IRMTSAMPLEFLIGHTRequestHandlerListener;
import com.example.rmtsampleflight.v1.helpers.ListenerWrapper;
import com.example.rmtsampleflight.v1.helpers.RMTSAMPLEFLIGHTRequestID;
import com.sap.gwpa.proxy.MediaLink;
import com.sap.gwpa.proxy.ODataQuery;
import com.sap.gwpa.proxy.RequestStatus;
import com.sap.gwpa.proxy.RequestStatus.StatusType;
import com.sap.gwpa.proxy.ServiceInitializationException;
import com.sap.gwpa.proxy.ServiceNegotiator;
import com.sap.gwpa.proxy.connectivity.ActionHelperDelegateImpl;
import com.sap.gwpa.proxy.connectivity.ConnectivitySettings;
import com.sap.gwpa.proxy.connectivity.ContentTypeHelperDelegateImpl;
import com.sap.gwpa.proxy.connectivity.CredentialsData;
import com.sap.gwpa.proxy.connectivity.CsrfConnectivityHelperDelegateImpl;
import com.sap.gwpa.proxy.connectivity.DataVaultHelper;
import com.sap.gwpa.proxy.connectivity.JsonHelperDelegateImpl;
import com.sap.gwpa.proxy.connectivity.ProxyData;
import com.sap.gwpa.proxy.connectivity.SDMConnectivityHelper;
import com.sap.gwpa.proxy.connectivity.SDMResponseWrapper;
import com.sap.gwpa.proxy.connectivity.SUPHelper;
import com.sap.gwpa.proxy.connectivity.SUPHelperException;
import com.sap.gwpa.proxy.connectivity.authenticators.AuthenticatingException;
import com.sap.gwpa.proxy.connectivity.authenticators.FormBasedSAMLAuthenticator;
import com.sap.gwpa.proxy.connectivity.authenticators.IAuthenticator;
import com.sap.gwpa.proxy.connectivity.authenticators.PortalAuthenticator;
import com.sap.gwpa.proxy.connectivity.authenticators.UsernamePasswordAuthenticator;
import com.sap.mobile.lib.configuration.PreferencesException;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.ParserException;
import com.sap.mobile.lib.request.BaseRequest;
import com.sap.mobile.lib.request.ConnectivityException;
import com.sap.mobile.lib.request.INetListener;
import com.sap.mobile.lib.request.IRequest;
import com.sap.mobile.lib.request.IRequestStateElement;
import com.sap.mobile.lib.request.IResponse;
import com.sap.mobile.lib.request.RequestStateElement;
import com.sap.mobile.lib.request.ResponseImpl;
import com.sap.mobile.lib.supportability.ILogger;
import com.sap.mobile.lib.supportability.Logger;

/**
 * Abstract: A singleton class responsible for sending the appropriate service requests 
 * (for retrieving and modifying service data) and parsing the responses into semantic objects, 
 * using the service proxy and the SDMConnectivityHelper class. 
 * The sent requests also consider the service URL and the SAP client defined in the application settings. 
 * The class is also responsible for sending the appropriate notifications to the application delegate 
 * and view controllers, for handling the request success, failure and authentication challenge.  
 */
@SuppressWarnings("deprecation")
public class RMTSAMPLEFLIGHTRequestHandler implements INetListener
{
 	private static final String GWPA_ACTION = "gwpa-action";
    private static final String GWPA_BATCH_ACTION = "gwpa-batch-action";
    private static final String BATCH = "batch";
 	private static final String TAG = "RMTSAMPLEFLIGHTRequestHandler";
 
    // Application context
    private static android.content.Context context;
    
    // The Request Handler's SDM Connectivity Helper
    private SDMConnectivityHelper connectivityHelper;
    
    // The service proxy
    private RMTSAMPLEFLIGHTService service;
    
    // The service document URL
    private String serviceDocumentURL;
    
    // The sap-client, null is default
    private String SAPClient; 
    
    // SDM Logger
    private ILogger logger;
    
    // Proxy Data
    private ProxyData proxyData;
    
    // The authenticator 
    private IAuthenticator authenticator;

    // Server Certificate resource id
    private int[] certid;

    // Indicates if the service proxy is initialized using local metadata.
    private boolean useLocalMetadata;
        
    // Indicates if the service negotiation process should be performed. This is considered only when the useLocalMetadata property is set to false.
    private boolean useServiceNegotiation;
    
    private ServiceNegotiator serviceNegotiator;
    
    // A map that holds RequestID as keys and Objects
    // that represent the Source object as values.
    // The object may be null.
    private Map<RMTSAMPLEFLIGHTRequestID, Object> requestsIdentifierMap;
    
    // Holds all the listeners of this request handler
    private List<ListenerWrapper> listenerWrappers;
    
    // Indicates if the service uses Json or Xml
    private boolean useJson = false;
    
    private JsonHelperDelegateImpl jsonHeadersDelegate = new JsonHelperDelegateImpl();
    private boolean isJsonHelperDelegateWasAdded = false;
    
    // Indicates whether the login process succeeded or not
    private boolean isLoginSucceeded = false;
    
    /*
     * Private constructor for the singleton class
     */
	private RMTSAMPLEFLIGHTRequestHandler()
	{
	    try
	    {
	        // initialization
	        this.useLocalMetadata = false;
	    	this.useServiceNegotiation = true;
	        this.logger = new Logger();
	        this.service = new RMTSAMPLEFLIGHTService(context); 
	        
	        /*
             * ******  
             * to pass the resource id.
             * ******
             */
//	        certid = new int[]{R.raw.sslcert};
//	        this.proxyData = new ProxyData(); 
//			this.proxyData.setHost("hostName");  
//			this.proxyData.setPort(portNumber);
//			this.proxyData.setBypassProxy("BypassProxy"); 
	        
	        /*
             * ****** 
             * ******
             */
//			ConnectivitySettings.getInstance().setAuthenticationType(AuthenticationType.FormsBasedSAMLAuthenticationType);
			
	        this.connectivityHelper = new SDMConnectivityHelper(context, certid, proxyData);
	        this.connectivityHelper.getParameters().setAutoRedirectEnabled(false);
	        this.serviceDocumentURL = this.service.getBaseUrl();
	        this.listenerWrappers = new ArrayList<ListenerWrapper>();
	        this.requestsIdentifierMap = new HashMap<RMTSAMPLEFLIGHTRequestID, Object>();
	        registerSDMConnectivityHelperDelegate();
	    }
	    catch(ExceptionInInitializerError e) 
	    {
	        this.logger.e(TAG, "Failed to create a service proxy: " + e.getLocalizedMessage());
	    } 
	    catch (PreferencesException e)
        {
	        this.logger.e(TAG, "Failed to create SDMPreferences: " + e.getLocalizedMessage());
        }
	}
	
	private void registerSDMConnectivityHelperDelegate() 
	{
		if (this.service.getBaseUrl().contains("odata"))
		{
			this.connectivityHelper.registerSDMConnectivityHelperDelegate(new CsrfConnectivityHelperDelegateImpl(this.service.getBaseUrl()));
		}
	}
	
	/*
	 * Holder for the singleton class
	 */
	private static class RMTSAMPLEFLIGHTRequestHandlerHolder
	{
		public static final RMTSAMPLEFLIGHTRequestHandler requestHandler = new RMTSAMPLEFLIGHTRequestHandler();
	}
	
	
	/**
	 * Returns the instance of the singleton class,
	 * and initializes the application context, if it wasn't initialized before.
	 * 
	 * @param givenContext - application context
	 * @return - the instance of the Request Handler
	 */
	public static RMTSAMPLEFLIGHTRequestHandler getInstance(android.content.Context givenContext)
	{
	    if (context == null)
	    {
	        context = givenContext;
	    }
	    
		return RMTSAMPLEFLIGHTRequestHandlerHolder.requestHandler;
	}
	
	
	/**
	 * Authenticates the given user name and password against the service. 
	 * Make sure to call this method before calling any other method 
	 * of this class for executing service requests.
	 * 
	 * @param username - the user name
	 * @param password - the password
	 * @param vaultPassword - vault password value. Needed when working in SUP mode.
     * @param vaultSalt - vault salt value. Needed when working in SUP mode.
	 * @return - true whether the login has succeeded, and false otherwise
	 * @throws ServiceInitializationException - in case the service proxy wasn't initialized properly.
	 * @throws SUPHelperException 
	 */
	public boolean executeLoginUsernamePassword(String username, String password, String vaultPassword, String vaultSalt) throws ServiceInitializationException, SUPHelperException
	{
		removeJsonHeaders();
	    this.isLoginSucceeded = false;
	    	    
	    // validate service proxy
	    if (this.useLocalMetadata && this.service == null)
        {
	        this.logger.e(TAG, "Error while trying to execute login, the service proxy was null");
	        throw new ServiceInitializationException("The service proxy is null");
        }
	    
        try
        {        
        	// activate required authentication type
        	authenticator = activateAuthentication(username, password, vaultPassword, vaultSalt);
        	// add SAP client provided by the developer
        	authenticator.setSAPClient(this.SAPClient);
            
        	if (ConnectivitySettings.getInstance().isSUPMode())
            {
            	setURLAndClientWithSUPApplicationEndPoint();
            }
        	
        	// validate service URL (set by the developer, or from the local service document, or from SUP application end point)
    	    if ((this.serviceDocumentURL == null) || (this.serviceDocumentURL.length() == 0))
    	    {
    	        this.logger.e(TAG, "Error while trying to execute login, the service document URL was not set properly in the proxy");
    	        throw new ServiceInitializationException("The service document URL was not set properly");
    	    }
            
            // In case local metadata is used, it's enough to call authenticator to validate credentials 
    	    // without parsing the response
            if (this.useLocalMetadata)
            {
            	if (ConnectivitySettings.getInstance().isSUPMode())
            		{
            			this.serviceDocumentURL = serviceDocumentURL.substring(0, serviceDocumentURL.length()-1);
            		}
            		
            	// Get service document using the authenticator (negotiation is not supported in this scenario):
                String serviceDocumentData = authenticator.authenticate(new ODataQuery(this.serviceDocumentURL));                
                if (serviceDocumentData != null) 
                {
                	setConnectivityCredentials(username, password, vaultPassword, vaultSalt);
                	this.isLoginSucceeded = true;
                	if(this.useJson)
                	{
                		addJsonHeaders();
                	}
                	return true;
                }
                else
                {
                	return false;
                } 
            }
            else
            {
                // In case local metadata is not used, negotiate the best matching service version, 
                // get the service data, the service metadata, and re-initialize the service proxy object
            	
            	// Negotiate using the authenticator:
            	boolean serviceNegotiationResult = negotiateServiceVersionAndUpdateServiceDocumentUrl(authenticator);
            	String serviceDocumentData = null;
            	if (serviceNegotiationResult)
            	{
            		this.logger.i(TAG, "Service negotiation succeeded.");
            		setConnectivityCredentials(username, password, vaultPassword, vaultSalt);
            		// Get service document without authenticator
            		serviceDocumentData = executeServiceDocumentRequest();
            	}
            	else 
            	{
            		if (ConnectivitySettings.getInstance().isSUPMode())
            		{
            			this.serviceDocumentURL = serviceDocumentURL.substring(0, serviceDocumentURL.length()-1);
            		}
            		
                    // Get service document using the authenticator (as negotiation failed or skipped)
            		serviceDocumentData = authenticator.authenticate(new ODataQuery(this.serviceDocumentURL));                
                    if (serviceDocumentData != null) 
                    {
                    	setConnectivityCredentials(username, password, vaultPassword, vaultSalt);
                    }
            	}
            	
            	// Get service metadata and use it to init the service proxy object:           	           	           	
            	if (serviceDocumentData != null) 
            	{
	            	String serviceMetadataData = executeServiceMetadataRequest();
	        		if (serviceMetadataData != null)
	        		{
	        			this.service = new RMTSAMPLEFLIGHTService(context, serviceDocumentData, serviceMetadataData);
	        			this.service.setUrl(this.serviceDocumentURL);
	        			this.isLoginSucceeded = true;
	                	if(this.useJson)
	                	{
	                		addJsonHeaders();
	                	}
	        			return true;
	        		}
	        		else
	        		{
	        			return false;
	        		}
            	}
            	else
            	{
            		return false;
            	}
            }
        } 
        catch (AuthenticatingException e)
        {
            this.logger.e(TAG, "Failed to perform login: " + e.getLocalizedMessage());
            return false;
        }
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, "Failed to perform login: " + e.getLocalizedMessage());
            return false;
        }         
	}
	
	/**
	 * logout the user saved on the device.  
	 * 
	 * @throws SUPHelperException 
	 */
	public void logout() throws AuthenticatingException
	{
		if (authenticator == null)
		{
    		throw new AuthenticatingException("Logout must be called after login.");
		}
		
		try 
		{
			authenticator.clearAuthenticationData();
		} 
		catch (AuthenticatingException e) 
		{
            this.logger.e(TAG, "Error while performing unregistration from SUP or deleting credentials from vault: " + e.getLocalizedMessage());
    		throw e;
		}
		
	}
	
	/**
	 * Updates the service document URL with the result of the best matching service query of the Gateway service catalog.
	 * Is performed as part of the login process (in the executeLoginUsernamePassword method), if the useServiceNegotiation property is set to true.
	 * @param authenticator - The implementation of Authenticating protocol according to the required authentication method.
	 * @return - boolean indicating if service negotiation succeeded.
	 */
	public boolean negotiateServiceVersionAndUpdateServiceDocumentUrl(IAuthenticator authenticator)
	{
		if (!this.useServiceNegotiation) 
		{
			this.logger.i(TAG, "Skipping service negotiation process.");
			return false;
		}
			
		// Initialize service negotiation object
		try 
		{
			this.serviceNegotiator = new ServiceNegotiator(this.serviceDocumentURL, ServiceVersionConfigurations.CATALOG_SERVICE_URL);
		} 
		catch (MalformedURLException e) 
		{
			this.logger.e(TAG, e.getLocalizedMessage());
		} 
		catch (UnsupportedEncodingException e) 
		{
			this.logger.e(TAG, e.getLocalizedMessage());
		}
		
		if (this.serviceNegotiator == null)
		{
			this.logger.i(TAG, "ServiceNegotiator was not initialized. Skipping service negotiation process.");
			return false;
		}
		
		this.serviceNegotiator.setTechnicalServiceName(ServiceVersionConfigurations.TECHNICHAL_SERVICE_NAME);
		this.serviceNegotiator.setTechnicalServiceVersionMax(ServiceVersionConfigurations.TECHNICHAL_SERVICE_VERSION_MAX);
		this.serviceNegotiator.setTechnicalServiceVersionMin(ServiceVersionConfigurations.TECHNICHAL_SERVICE_VERSION_MIN);
		
		String negotiationResponse = null;
		try 
		{
			negotiationResponse = this.executeServiceNegotiationRequest(authenticator);
		} 
		catch (MalformedURLException e) 
		{
			this.logger.e(TAG, "Failed to execute service negotiation: " + e.getLocalizedMessage());
		} 
		catch (AuthenticatingException e) 
		{
			this.logger.e(TAG, "Failed to execute service negotiation: " + e.getLocalizedMessage());
		}
		
		if (negotiationResponse != null && negotiationResponse.length() != 0) 
		{
			if (this.serviceNegotiator.parseBestMatchingServiceResult(negotiationResponse)) 
			{
				String bestMatchingServiceUrl = this.serviceNegotiator.getBestMatchingServiceUrl();
				if (bestMatchingServiceUrl != null && bestMatchingServiceUrl.length() != 0) 
				{
					this.logger.i(TAG, "Service negotiation process completed successfully. Updating service document URL.");
					setServiceDocumentURL(bestMatchingServiceUrl);
					// Make sure the service negotiation process runs only once.
					this.useServiceNegotiation = false;
					return true;
				}
			}
		}
		
		return false;
	}
	
	private String executeServiceNegotiationRequest(IAuthenticator authenticator) throws MalformedURLException, AuthenticatingException
	{
		ODataQuery query = this.serviceNegotiator.getBestMatchingServiceQuery();
		
		if (query != null) 
		{
			return authenticator.authenticate(query);
		}
		
		return null;
	}

	/*
	 * Activates the right authentication protocol based on the configuration settings.
	 */
	private IAuthenticator activateAuthentication(String username, String password, String vaultPassword, String vaultSalt) throws AuthenticatingException
	{
	    // in case in SUP mode, authentication type is defined between SUP Server and Gateway, so we need a simple UsernamePasswordAuthenticator
	    if(ConnectivitySettings.getInstance().isSUPMode()) 
	    {
	        return activateUsernamePasswordAuthentication(username, password, vaultPassword, vaultSalt, certid, proxyData);
	    }
	    else 
	    {
	    	switch (ConnectivitySettings.getInstance().getAuthenticationType()) 
	    	{
			case UsernamePasswordAuthenticationType:
		        return activateUsernamePasswordAuthentication(username, password, vaultPassword, vaultSalt, certid, proxyData);
			case PortalAuthenticationType:
		        return activatePortalAuthentication(username, password, vaultPassword, vaultSalt, certid, proxyData);
		    case FormsBasedSAMLAuthenticationType:
		    	return activateFormBasedSAMLAuthentication(username, password, vaultPassword, vaultSalt, certid, proxyData);
			default:
				return activateUsernamePasswordAuthentication(username, password, vaultPassword, vaultSalt, certid, proxyData);
			}
	    }
	}
	
	/*
	 * Activates the Portal authentication.
	 */
	private IAuthenticator activatePortalAuthentication(String username,
			String password, String vaultPassword, String vaultSalt, int[] certid, ProxyData proxyData) throws AuthenticatingException 
	{
		return new PortalAuthenticator(username, password, context, vaultPassword, vaultSalt, certid, proxyData);
	}
	
	/*
	 * Activates the UsernamePassword authentication.
	 */
	private IAuthenticator activateUsernamePasswordAuthentication(String username, String password, String vaultPassword, String vaultSalt, int[] certid, ProxyData proxyData) throws AuthenticatingException
	{
	    return new UsernamePasswordAuthenticator(username, password, context, vaultPassword, vaultSalt, certid, proxyData);
	}
	
	/*
	 * Activates the GWaaS SAML authentication.
	 */
	private IAuthenticator activateFormBasedSAMLAuthentication(String username, String password, String vaultPassword, String vaultSalt, int[] certid, ProxyData proxyData) throws AuthenticatingException
	{
	    return new FormBasedSAMLAuthenticator(username, password, context, vaultPassword, vaultSalt, certid, proxyData);
	}
	
    public boolean isLoginSucceeded() {
		return isLoginSucceeded;
	}

	public void setLoginSucceeded(boolean isLoginSucceeded) {
		this.isLoginSucceeded = isLoginSucceeded;
	}
	
	// Indicates if the service uses Json or Xml
	public boolean isUseJson() {
		return useJson;
	}

	// call this method after the login process ends
	public void setUseJson(boolean useJson) {
		this.useJson = useJson;
		if(this.useJson && this.isLoginSucceeded)
		{
			addJsonHeaders();
		}
		else if(!this.useJson)
		{
			removeJsonHeaders();
		}
	}
	
	private void addJsonHeaders() 
	{
		if(!isJsonHelperDelegateWasAdded)
		{
	        this.connectivityHelper.registerSDMConnectivityHelperDelegate(jsonHeadersDelegate);
	        isJsonHelperDelegateWasAdded = true;
		}
	}
	
	
	private void removeJsonHeaders() 
	{
		this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(jsonHeadersDelegate);
		isJsonHelperDelegateWasAdded = false;
	}
	
	
	/*
	 * Set the appropriate credentials parameters in the connectivity helper for further requests, 
	 * after first successful call using an authenticator.
	 * In case of non-SUP connectivity mode, we keep using null username and password (as the session cookie is used).
	 * in SUP connectivity mode, where there is no session cookie, the authentication credentials should be passed with any request.
	 */
	private void setConnectivityCredentials(String username, String password, String vaultPassword, String vaultSalt) throws SUPHelperException
	{
        if (ConnectivitySettings.getInstance().isSUPMode())
        {
             if (TextUtils.isEmpty(username) || TextUtils.isEmpty(password))
             {
                   DataVaultHelper dataVaultHelper = DataVaultHelper.getInstance(context);
                   if (dataVaultHelper.isCredentialsSaved(vaultPassword, vaultSalt))
                   {
						// get the user name and password from the vault
						CredentialsData userCredentialsFromDataVault = dataVaultHelper.getUserCredentialsFromDataVault(vaultPassword, vaultSalt);
						username = userCredentialsFromDataVault.getUsername();
						password = userCredentialsFromDataVault.getPassword();
                   }
             }
             
             this.connectivityHelper.setConnectivityParameters(username, password, true);
        }
        else
        {
             this.connectivityHelper.setConnectivityParameters(null, null, true);
        }
	}
	
	private void setURLAndClientWithSUPApplicationEndPoint() throws SUPHelperException
	{
		String applicationEndpoint = null;
		
		try 
		{
			applicationEndpoint = SUPHelper.getServiceUrl();
		} 
		catch (SUPHelperException e) 
		{		
			this.logger.e(TAG, "Failed to retrieve application endpoint from SUP. " + e.getLocalizedMessage());
			throw e;
		}
		
		int urlParametersIndex =  applicationEndpoint.indexOf("?");
		if (urlParametersIndex == -1)
		{
			setServiceDocumentURL(applicationEndpoint);
			setSAPClient(null);
		}		
		else // found the "?"
		{        
			String serviceUrlValue = applicationEndpoint.substring(0, urlParametersIndex);
			setServiceDocumentURL(serviceUrlValue);// URL without parameters
			
	        // Extract SAP Client parameter:
	        String parameters = applicationEndpoint.substring(urlParametersIndex + 1, applicationEndpoint.length()); 
	        String sapClient = "sap-client=";
	        int sapClientIndex = parameters.indexOf(sapClient); 
	        
	        String clientValue = null;
	        if (sapClientIndex > -1)
	        {	            
	        	clientValue = parameters.substring(sapClientIndex + sapClient.length());

	        	// Remove what's after & or / charachters (if exist) from client value
	        	int indexOfOther = clientValue.indexOf("&");
	            
	        	if (indexOfOther == -1 ) 
	            {
	            	indexOfOther = clientValue.indexOf("/");    
	            }
	     
	            if (indexOfOther > -1 ) 
	            {
	                clientValue = clientValue.substring(0, indexOfOther);
	            }
	        }
        
	        setSAPClient(clientValue);        
		}
	}
	
	private String executeServiceMetadataRequest()
	{
		String serviceMetadataUrl = serviceDocumentURL + "/$metadata";
		String responseString = null;
		
        ODataQuery query;
		try 
		{
			query = new ODataQuery(serviceMetadataUrl);
			SDMResponseWrapper response = this.connectivityHelper.executeBasicSyncRequest(query);
			if (response != null && (!response.getRequestFailed()))
			{				
				IResponse responseData = response.getSdmResponse();
				responseString = EntityUtils.toString(responseData.getEntity(), "UTF-8");
			}				
		} 
		
		catch (MalformedURLException e) 
		{
        	this.logger.e(TAG, "Failed to execute service Metadata request " + e.getLocalizedMessage());
		} 
		catch (ParseException e) 
		{
			this.logger.e(TAG, "Error while parsing the response " + e.getLocalizedMessage());
		} 
		catch (IOException e) 
		{
			this.logger.e(TAG, "Failed to convert the response data " + e.getLocalizedMessage());
		}

		return responseString;
	}
	
	private String executeServiceDocumentRequest()
	{
		String responseString = null;
		
        ODataQuery query;
		try 
		{
			query = new ODataQuery(serviceDocumentURL);
			SDMResponseWrapper response = this.connectivityHelper.executeBasicSyncRequest(query);
			if (response != null && (!response.getRequestFailed()))
			{				
				IResponse responseData = response.getSdmResponse();
				responseString = EntityUtils.toString(responseData.getEntity(), "UTF-8");
			}	
		} 
		
		catch (MalformedURLException e) 
		{
        	this.logger.e(TAG, "Failed to execute service document request " + e.getLocalizedMessage());
		} 
		catch (ParseException e) 
		{
			this.logger.e(TAG, "Error while parsing the response " + e.getLocalizedMessage());
		} 
		catch (IOException e) 
		{
			this.logger.e(TAG, "Failed to convert the response data " + e.getLocalizedMessage());
		}

		return responseString;
	}
	
	/**
	 * Sets the service document URL.
	 * @param serviceDocumentURL
	 */
    public void setServiceDocumentURL(String serviceDocumentURL)
	{
	    this.serviceDocumentURL = serviceDocumentURL;
	    
	    if (this.serviceDocumentURL.length() > 0)
	    {
	    	if (this.service == null)
	    	{
	    		this.service = new RMTSAMPLEFLIGHTService(context);
	    	}
	    	
	        this.service.setUrl(serviceDocumentURL);
	    }
	}
	
	/**
     * Sets the SAP-Client.
     * @param serviceDocumentURL
     */
    public void setSAPClient(String client)
    {
        this.SAPClient = client;
        this.connectivityHelper.setSAPClient(client);
    }
    
	/**
	 * Sets whether to use the service document and metadata resources from the local files,
	 * or to fetch them on-line in the login process.
	 */	
	public void setUseLocalMetadata(boolean useLocalMetadata) 
	{
		this.useLocalMetadata = useLocalMetadata;
	}
	
    /**
     * Sets whether the service negotiation process should be performed as part of the login process.
     * This is considered only when the useLocalMetadata property is set to false.
     */
    public void setUseServiceNegotiation(boolean useServiceNegotiation)
    {
    	this.useServiceNegotiation = useServiceNegotiation;
    }
    
    /**
     * Add Expand String to ODataQuery object
     */
    private ODataQuery appendExpandStrings(ODataQuery query, String... toExpand) throws UnsupportedEncodingException 
	{
		StringBuffer sb = new StringBuffer();
		
		for (String navigationToExpand : toExpand) 
		{
			if (navigationToExpand.trim().length() > 0)
			{
				sb.append(navigationToExpand);
				sb.append(',');
			}
		}
		
		String toExpandString = sb.toString();
		int lastIndexOf = toExpandString.lastIndexOf(',');
		if(lastIndexOf > 0)
		{
			toExpandString = toExpandString.subSequence(0, lastIndexOf).toString();
		}
		
		if (toExpandString.trim().length() > 0)
		{
			query.expand(toExpandString);
		}
		
		return query;
	}
	

	/**
     * Executes a request for a BookingCollection.
     */
    public void loadBookingCollection()
    {
       loadBookingCollection("");
    }

	/**
     * Executes a request for a BookingCollection.
     * @param toExpand -execute expanded request 
     */
    public void loadBookingCollection(boolean toExpand)
    {
    	if (toExpand)
    	{
        	loadBookingCollection("bookedFlight");
    	}
    	else
    	{
        	loadBookingCollection("");
    	}
    }

	/**
     * Executes a request for a BookingCollection.
     */
    public void loadBookingCollection(String... toExpand)
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getBookingCollectionQuery();
            
			if (toExpand.length != 0)
            {
    			appendExpandStrings(query,toExpand);
            }
			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_BOOKINGCOLLECTION.name());
            } 
			else
			{
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_BOOKINGCOLLECTION.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
			}
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_BOOKINGCOLLECTION, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_BOOKINGCOLLECTION, null, requestStatus);
            return;
        }
        catch (UnsupportedEncodingException e1) 
        {
        	 this.logger.e(TAG, e1.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e1, e1.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_BOOKINGCOLLECTION, null, requestStatus);
             return;
		}  
    }
    
    /*
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadBookingCollectionCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        List<Booking> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadBookingCollectionCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Booking entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            entries = this.service.getBookingCollection(data);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify the listeners with the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }


	/**
     * Executes a request for a CarrierCollection.
     */
    public void loadCarrierCollection()
    {
       loadCarrierCollection("");
    }

	/**
     * Executes a request for a CarrierCollection.
     * @param toExpand -execute expanded request 
     */
    public void loadCarrierCollection(boolean toExpand)
    {
    	if (toExpand)
    	{
        	loadCarrierCollection("carrierFlights");
    	}
    	else
    	{
        	loadCarrierCollection("");
    	}
    }

	/**
     * Executes a request for a CarrierCollection.
     */
    public void loadCarrierCollection(String... toExpand)
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getCarrierCollectionQuery();
            
			if (toExpand.length != 0)
            {
    			appendExpandStrings(query,toExpand);
            }
			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERCOLLECTION.name());
            } 
			else
			{
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERCOLLECTION.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
			}
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERCOLLECTION, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERCOLLECTION, null, requestStatus);
            return;
        }
        catch (UnsupportedEncodingException e1) 
        {
        	 this.logger.e(TAG, e1.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e1, e1.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERCOLLECTION, null, requestStatus);
             return;
		}  
    }
    
    /*
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadCarrierCollectionCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        List<Carrier> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadCarrierCollectionCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Carrier entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            entries = this.service.getCarrierCollection(data);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify the listeners with the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }




	/**
     * Executes a request for a TravelagencyCollection.
     */
    public void loadTravelagencyCollection()
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getTravelagencyCollectionQuery();
            
			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCYCOLLECTION.name());
            } 
			else
			{
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCYCOLLECTION.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
			}
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCYCOLLECTION, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCYCOLLECTION, null, requestStatus);
            return;
        }
    }
    
    /*
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadTravelagencyCollectionCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        List<Travelagency> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadTravelagencyCollectionCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Travelagency entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            entries = this.service.getTravelagencyCollection(data);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify the listeners with the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }




	/**
     * Executes a request for a TravelAgencies.
     */
    public void loadTravelAgencies()
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getTravelAgenciesQuery();
            
			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCIES.name());
            } 
			else
			{
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCIES.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
			}
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCIES, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCIES, null, requestStatus);
            return;
        }
    }
    
    /*
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadTravelAgenciesCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        List<Travelagency> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadTravelAgenciesCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Travelagency entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            entries = this.service.getTravelAgencies(data);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify the listeners with the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }




	/**
     * Executes a request for a SubscriptionCollection.
     */
    public void loadSubscriptionCollection()
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getSubscriptionCollectionQuery();
            
			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_SUBSCRIPTIONCOLLECTION.name());
            } 
			else
			{
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_SUBSCRIPTIONCOLLECTION.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
			}
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_SUBSCRIPTIONCOLLECTION, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_SUBSCRIPTIONCOLLECTION, null, requestStatus);
            return;
        }
    }
    
    /*
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadSubscriptionCollectionCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        List<Subscription> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadSubscriptionCollectionCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Subscription entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            entries = this.service.getSubscriptionCollection(data);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify the listeners with the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }


	/**
     * Executes a request for a FlightCollection.
     */
    public void loadFlightCollection()
    {
       loadFlightCollection("");
    }

	/**
     * Executes a request for a FlightCollection.
     * @param toExpand -execute expanded request 
     */
    public void loadFlightCollection(boolean toExpand)
    {
    	if (toExpand)
    	{
        	loadFlightCollection("flightbooking","flightBookings","FlightCarrier");
    	}
    	else
    	{
        	loadFlightCollection("");
    	}
    }

	/**
     * Executes a request for a FlightCollection.
     */
    public void loadFlightCollection(String... toExpand)
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getFlightCollectionQuery();
            
			if (toExpand.length != 0)
            {
    			appendExpandStrings(query,toExpand);
            }
			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCOLLECTION.name());
            } 
			else
			{
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCOLLECTION.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
			}
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCOLLECTION, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCOLLECTION, null, requestStatus);
            return;
        }
        catch (UnsupportedEncodingException e1) 
        {
        	 this.logger.e(TAG, e1.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e1, e1.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCOLLECTION, null, requestStatus);
             return;
		}  
    }
    
    /*
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadFlightCollectionCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        List<Flight> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadFlightCollectionCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Flight entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            entries = this.service.getFlightCollection(data);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify the listeners with the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }


	/**
     * Executes a request for a single Booking entry.
     */
    public void loadBookingCollectionEntry(String carrid, String connid, Date fldate, String bookid) 
    {
        loadBookingCollectionEntry(carrid,connid,fldate,bookid ,"") ;
    }

	/**
     * Executes a request for a single Booking entry.
     * @param toExpand -execute expanded request 
     */
    public void loadBookingCollectionEntry(String carrid, String connid, Date fldate, String bookid ,boolean toExpand)  
    {
    	if (toExpand)
    	{
        	loadBookingCollectionEntry(carrid,connid,fldate,bookid,"bookedFlight");
    	}
    	else
    	{
        	loadBookingCollectionEntry(carrid,connid,fldate,bookid ,"") ;
    	}
    }
    
    /**
     * Executes a request for a single Booking entry.
     */
    private void loadBookingCollectionEntry(String carrid, String connid, Date fldate, String bookid, String... toExpand) 
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getBookingCollectionEntryQuery(carrid,connid,fldate,bookid);

    		query = appendExpandStrings(query,toExpand);
			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_BOOKINGCOLLECTION_ENTRY.name());
            } 
            else
            {
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_BOOKINGCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	        }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_BOOKINGCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
		catch (UnsupportedEncodingException e1) 
        {
        	this.logger.e(TAG, e1.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e1, e1.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_BOOKINGCOLLECTION_ENTRY, null, requestStatus);
            return;
		} 
		catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_BOOKINGCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
    }
    


	/**
     * Executes a request for a single Carrier entry.
     */
    public void loadCarrierCollectionEntry(String carrid) 
    {
        loadCarrierCollectionEntry(carrid ,"") ;
    }

	/**
     * Executes a request for a single Carrier entry.
     * @param toExpand -execute expanded request 
     */
    public void loadCarrierCollectionEntry(String carrid ,boolean toExpand)  
    {
    	if (toExpand)
    	{
        	loadCarrierCollectionEntry(carrid,"carrierFlights");
    	}
    	else
    	{
        	loadCarrierCollectionEntry(carrid ,"") ;
    	}
    }
    
    /**
     * Executes a request for a single Carrier entry.
     */
    private void loadCarrierCollectionEntry(String carrid, String... toExpand) 
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getCarrierCollectionEntryQuery(carrid);

    		query = appendExpandStrings(query,toExpand);
			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERCOLLECTION_ENTRY.name());
            } 
            else
            {
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	        }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
		catch (UnsupportedEncodingException e1) 
        {
        	this.logger.e(TAG, e1.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e1, e1.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERCOLLECTION_ENTRY, null, requestStatus);
            return;
		} 
		catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
    }
    



    
    /**
     * Executes a request for a single Travelagency entry.
     */
    public void loadTravelagencyCollectionEntry(String agencynum) 
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getTravelagencyCollectionEntryQuery(agencynum);

			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCYCOLLECTION_ENTRY.name());
            } 
            else
            {
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCYCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	        }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCYCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
		catch (UnsupportedEncodingException e1) 
        {
        	this.logger.e(TAG, e1.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e1, e1.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCYCOLLECTION_ENTRY, null, requestStatus);
            return;
		} 
		catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCYCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
    }
    



    
    /**
     * Executes a request for a single Travelagency entry.
     */
    public void loadTravelAgenciesEntry(String agencynum) 
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getTravelAgenciesEntryQuery(agencynum);

			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCIES_ENTRY.name());
            } 
            else
            {
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCIES_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	        }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCIES_ENTRY, null, requestStatus);
            return;
        }
		catch (UnsupportedEncodingException e1) 
        {
        	this.logger.e(TAG, e1.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e1, e1.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCIES_ENTRY, null, requestStatus);
            return;
		} 
		catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_TRAVELAGENCIES_ENTRY, null, requestStatus);
            return;
        }
    }
    



    
    /**
     * Executes a request for a single Subscription entry.
     */
    public void loadSubscriptionCollectionEntry(String ID) 
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getSubscriptionCollectionEntryQuery(ID);

			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_SUBSCRIPTIONCOLLECTION_ENTRY.name());
            } 
            else
            {
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_SUBSCRIPTIONCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	        }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_SUBSCRIPTIONCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
		catch (UnsupportedEncodingException e1) 
        {
        	this.logger.e(TAG, e1.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e1, e1.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_SUBSCRIPTIONCOLLECTION_ENTRY, null, requestStatus);
            return;
		} 
		catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_SUBSCRIPTIONCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
    }
    
    /**
     * Creates a subscription for the given collection with the given parameters.
     * 
     * @param collection - collection name, the collection to subscribe to.
     * @param changeType - type of change
     * @param filter - filter
     * @param select - select
     */
    public void createSubscription(String collection, String changeType, String filter, String select)
    {
    	try 
    	{
	    	// create Subscription
			Subscription subscription = new Subscription("1"); // the ID is overwritten by Gateway
			subscription.setFilter(filter);
			subscription.setChangeType(changeType);
			subscription.setDeliveryAddress(SUPHelper.getSUPApplicationPushEndPoint());
			subscription.setSelect(select);
			subscription.setPersistNotifications(false);
			subscription.setCollection(collection);
			
			createSubscriptionCollectionEntry(subscription);
    	} 
    	catch (SUPHelperException e) 
    	{
    		this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_SUBSCRIPTION_FOR_NOTIFICATION, null, requestStatus);
            return;
		}
    }



    
    /**
     * Executes a request for a single Notification entry.
     */
    public void loadNotificationCollectionEntry(String ID) 
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getNotificationCollectionEntryQuery(ID);

			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_NOTIFICATIONCOLLECTION_ENTRY.name());
            } 
            else
            {
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_NOTIFICATIONCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	        }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_NOTIFICATIONCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
		catch (UnsupportedEncodingException e1) 
        {
        	this.logger.e(TAG, e1.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e1, e1.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_NOTIFICATIONCOLLECTION_ENTRY, null, requestStatus);
            return;
		} 
		catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_NOTIFICATIONCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
    }
    


	/**
     * Executes a request for a single Flight entry.
     */
    public void loadFlightCollectionEntry(String carrid, String connid, Date fldate) 
    {
        loadFlightCollectionEntry(carrid,connid,fldate ,"") ;
    }

	/**
     * Executes a request for a single Flight entry.
     * @param toExpand -execute expanded request 
     */
    public void loadFlightCollectionEntry(String carrid, String connid, Date fldate ,boolean toExpand)  
    {
    	if (toExpand)
    	{
        	loadFlightCollectionEntry(carrid,connid,fldate,"flightbooking","flightBookings","FlightCarrier");
    	}
    	else
    	{
        	loadFlightCollectionEntry(carrid,connid,fldate ,"") ;
    	}
    }
    
    /**
     * Executes a request for a single Flight entry.
     */
    private void loadFlightCollectionEntry(String carrid, String connid, Date fldate, String... toExpand) 
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getFlightCollectionEntryQuery(carrid,connid,fldate);

    		query = appendExpandStrings(query,toExpand);
			// checking if in batch mode
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCOLLECTION_ENTRY.name());
            } 
            else
            {
				// add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	
	            // execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	        }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
		catch (UnsupportedEncodingException e1) 
        {
        	this.logger.e(TAG, e1.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e1, e1.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCOLLECTION_ENTRY, null, requestStatus);
            return;
		} 
		catch (ConnectivityException e2)
        {
            this.logger.e(TAG, e2.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e2, e2.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
    }
    




	/**
     * Executes a request for a flightbooking
     * @param entry - the entry of the navigation property.
     */
    public void loadFlightbookingForFlight(Flight entry)
    {
    	 try
         {
             // get the query from the entry
             ODataQuery query = entry.flightbookingQuery();
             
             // put in the map
             this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTBOOKING_FOR_FLIGHT, entry);
             
             // add the gwpa-action header to the request
             ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTBOOKING_FOR_FLIGHT.name());
             this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
             
             // execute the query by the connectivity helper
             this.connectivityHelper.executeBasicAsyncRequest(query, this);
             
             // unregister the gwpa-action delegate
             this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
         } 
         catch (MalformedURLException e)
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTBOOKING_FOR_FLIGHT, null, requestStatus);
         } 
    }
    
    
    /*
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadFlightbookingForFlightCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        List<Booking> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadFlightbookingCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Flight entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            
            Object object = this.requestsIdentifierMap.get(requestID);
            
            this.requestsIdentifierMap.remove(requestID);
            
            if (object == null)
            {
            	requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The entry of the request is null");
                this.logger.e(TAG, "loadFlightbookingCompleted method: the entry of the request is null");
                // notify listeners
                notifyListenersForRequestCompleted(requestID, null, requestStatus);
                return;
            }
            
            // loads the entries into the Flight
            ((Flight)object).loadFlightbooking(data);
            
			entries = new ArrayList<Booking>();
            
            // returns the Booking of the Flight
            entries.add(((Flight)object).getFlightbooking());
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify the listeners with the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }

	/**
     * Executes a request for a flightBookings
     * @param entry - the entry of the navigation property.
     */
    public void loadFlightBookingsForFlight(Flight entry)
    {
    	 try
         {
             // get the query from the entry
             ODataQuery query = entry.flightBookingsQuery();
             
             // put in the map
             this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTBOOKINGS_FOR_FLIGHT, entry);
             
             // add the gwpa-action header to the request
             ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTBOOKINGS_FOR_FLIGHT.name());
             this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
             
             // execute the query by the connectivity helper
             this.connectivityHelper.executeBasicAsyncRequest(query, this);
             
             // unregister the gwpa-action delegate
             this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
         } 
         catch (MalformedURLException e)
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTBOOKINGS_FOR_FLIGHT, null, requestStatus);
         } 
    }
    
    
    /*
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadFlightBookingsForFlightCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
		List<Booking> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadFlightBookingsCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Flight entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            
            Object object = this.requestsIdentifierMap.get(requestID);
            
            this.requestsIdentifierMap.remove(requestID);
            
            if (object == null)
            {
            	requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The entry of the request is null");
                this.logger.e(TAG, "loadFlightBookingsCompleted method: the entry of the request is null");
                // notify listeners
                notifyListenersForRequestCompleted(requestID, null, requestStatus);
                return;
            }
            
            // loads the entries into the Flight
            ((Flight)object).loadFlightBookings(data);
            
			// returns the entries of the Flight
            entries = ((Flight)object).getFlightBookings();
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify the listeners with the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }

	/**
     * Executes a request for a FlightCarrier
     * @param entry - the entry of the navigation property.
     */
    public void loadFlightCarrierForFlight(Flight entry)
    {
    	 try
         {
             // get the query from the entry
             ODataQuery query = entry.FlightCarrierQuery();
             
             // put in the map
             this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCARRIER_FOR_FLIGHT, entry);
             
             // add the gwpa-action header to the request
             ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCARRIER_FOR_FLIGHT.name());
             this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
             
             // execute the query by the connectivity helper
             this.connectivityHelper.executeBasicAsyncRequest(query, this);
             
             // unregister the gwpa-action delegate
             this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
         } 
         catch (MalformedURLException e)
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_FLIGHTCARRIER_FOR_FLIGHT, null, requestStatus);
         } 
    }
    
    
    /*
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadFlightCarrierForFlightCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        List<Carrier> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadFlightCarrierCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Flight entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            
            Object object = this.requestsIdentifierMap.get(requestID);
            
            this.requestsIdentifierMap.remove(requestID);
            
            if (object == null)
            {
            	requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The entry of the request is null");
                this.logger.e(TAG, "loadFlightCarrierCompleted method: the entry of the request is null");
                // notify listeners
                notifyListenersForRequestCompleted(requestID, null, requestStatus);
                return;
            }
            
            // loads the entries into the Flight
            ((Flight)object).loadFlightCarrier(data);
            
			entries = new ArrayList<Carrier>();
            
            // returns the Carrier of the Flight
            entries.add(((Flight)object).getFlightCarrier());
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify the listeners with the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }

	/**
     * Executes a request for a bookedFlight
     * @param entry - the entry of the navigation property.
     */
    public void loadBookedFlightForBooking(Booking entry)
    {
    	 try
         {
             // get the query from the entry
             ODataQuery query = entry.bookedFlightQuery();
             
             // put in the map
             this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.LOAD_BOOKEDFLIGHT_FOR_BOOKING, entry);
             
             // add the gwpa-action header to the request
             ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_BOOKEDFLIGHT_FOR_BOOKING.name());
             this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
             
             // execute the query by the connectivity helper
             this.connectivityHelper.executeBasicAsyncRequest(query, this);
             
             // unregister the gwpa-action delegate
             this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
         } 
         catch (MalformedURLException e)
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_BOOKEDFLIGHT_FOR_BOOKING, null, requestStatus);
         } 
    }
    
    
    /*
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadBookedFlightForBookingCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        List<Flight> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadBookedFlightCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Flight entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            
            Object object = this.requestsIdentifierMap.get(requestID);
            
            this.requestsIdentifierMap.remove(requestID);
            
            if (object == null)
            {
            	requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The entry of the request is null");
                this.logger.e(TAG, "loadBookedFlightCompleted method: the entry of the request is null");
                // notify listeners
                notifyListenersForRequestCompleted(requestID, null, requestStatus);
                return;
            }
            
            // loads the entries into the Booking
            ((Booking)object).loadBookedFlight(data);
            
			entries = new ArrayList<Flight>();
            
            // returns the Flight of the Booking
            entries.add(((Booking)object).getBookedFlight());
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify the listeners with the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }

	/**
     * Executes a request for a carrierFlights
     * @param entry - the entry of the navigation property.
     */
    public void loadCarrierFlightsForCarrier(Carrier entry)
    {
    	 try
         {
             // get the query from the entry
             ODataQuery query = entry.carrierFlightsQuery();
             
             // put in the map
             this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERFLIGHTS_FOR_CARRIER, entry);
             
             // add the gwpa-action header to the request
             ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERFLIGHTS_FOR_CARRIER.name());
             this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
             
             // execute the query by the connectivity helper
             this.connectivityHelper.executeBasicAsyncRequest(query, this);
             
             // unregister the gwpa-action delegate
             this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
         } 
         catch (MalformedURLException e)
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIERFLIGHTS_FOR_CARRIER, null, requestStatus);
         } 
    }
    
    
    /*
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadCarrierFlightsForCarrierCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
		List<Flight> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadCarrierFlightsCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Flight entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            
            Object object = this.requestsIdentifierMap.get(requestID);
            
            this.requestsIdentifierMap.remove(requestID);
            
            if (object == null)
            {
            	requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The entry of the request is null");
                this.logger.e(TAG, "loadCarrierFlightsCompleted method: the entry of the request is null");
                // notify listeners
                notifyListenersForRequestCompleted(requestID, null, requestStatus);
                return;
            }
            
            // loads the entries into the Carrier
            ((Carrier)object).loadCarrierFlights(data);
            
			// returns the entries of the Carrier
            entries = ((Carrier)object).getCarrierFlights();
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify the listeners with the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }

 	/**
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadBookingCollectionEntryCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        // a single Booking is represented by a list of size 1
        List<Booking> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadBookingCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Booking entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            
            if (data.trim().equals(""))
            {
           		requestStatus = new RequestStatus(StatusType.OK, null, null);
           		notifyListenersForRequestCompleted(requestID, null, requestStatus);
           		return;
            }
            
            Booking entry = this.service.getBookingCollectionEntry(data);
            entries = new ArrayList<Booking>();
            entries.add(entry);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG,"Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify listeners of the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }
 	/**
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadTravelagencyCollectionEntryCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        // a single Travelagency is represented by a list of size 1
        List<Travelagency> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadTravelagencyCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Travelagency entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            
            if (data.trim().equals(""))
            {
           		requestStatus = new RequestStatus(StatusType.OK, null, null);
           		notifyListenersForRequestCompleted(requestID, null, requestStatus);
           		return;
            }
            
            Travelagency entry = this.service.getTravelagencyCollectionEntry(data);
            entries = new ArrayList<Travelagency>();
            entries.add(entry);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG,"Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify listeners of the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }
 	/**
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadCarrierCollectionEntryCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        // a single Carrier is represented by a list of size 1
        List<Carrier> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadCarrierCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Carrier entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            
            if (data.trim().equals(""))
            {
           		requestStatus = new RequestStatus(StatusType.OK, null, null);
           		notifyListenersForRequestCompleted(requestID, null, requestStatus);
           		return;
            }
            
            Carrier entry = this.service.getCarrierCollectionEntry(data);
            entries = new ArrayList<Carrier>();
            entries.add(entry);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG,"Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify listeners of the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }
 	/**
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadFlightCollectionEntryCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        // a single Flight is represented by a list of size 1
        List<Flight> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadFlightCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Flight entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            
            if (data.trim().equals(""))
            {
           		requestStatus = new RequestStatus(StatusType.OK, null, null);
           		notifyListenersForRequestCompleted(requestID, null, requestStatus);
           		return;
            }
            
            Flight entry = this.service.getFlightCollectionEntry(data);
            entries = new ArrayList<Flight>();
            entries.add(entry);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG,"Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify listeners of the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }
 	/**
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadSubscriptionCollectionEntryCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        // a single Subscription is represented by a list of size 1
        List<Subscription> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadSubscriptionCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Subscription entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            
            if (data.trim().equals(""))
            {
           		requestStatus = new RequestStatus(StatusType.OK, null, null);
           		notifyListenersForRequestCompleted(requestID, null, requestStatus);
           		return;
            }
            
            Subscription entry = this.service.getSubscriptionCollectionEntry(data);
            entries = new ArrayList<Subscription>();
            entries.add(entry);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG,"Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify listeners of the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }
 	/**
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void loadTravelAgenciesEntryCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;
        // a single Travelagency is represented by a list of size 1
        List<Travelagency> entries = null;
        String message = null;
        
        // check for valid response
        if (aResponse == null) 
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadTravelagencyCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }
        
        try
        {
            // parse the data into a list of Travelagency entries
            String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
            
            if (data.trim().equals(""))
            {
           		requestStatus = new RequestStatus(StatusType.OK, null, null);
           		notifyListenersForRequestCompleted(requestID, null, requestStatus);
           		return;
            }
            
            Travelagency entry = this.service.getTravelAgenciesEntry(data);
            entries = new ArrayList<Travelagency>();
            entries.add(entry);
            
            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }   
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG,"Error response from server: " + message);
            }
        }
        catch (ParserException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            }
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }
        
        // notify listeners of the response, that might include an error response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }

 	/**
     * Executes a create request for a single Booking entry.
     */
    public void createBookingCollectionEntry(Booking entry)
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getBookingCollectionQuery();
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.CREATE_BOOKINGCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "BookingCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_POST, contentType, "BookingCollection", data, RMTSAMPLEFLIGHTRequestID.CREATE_BOOKINGCOLLECTION_ENTRY.name());
            } 
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.CREATE_BOOKINGCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
	            
	            // execute the query by the connectivity helper
		        if (!this.useJson)
		        {
		        	this.connectivityHelper.executeAsyncCreateRequest(query, entry.getXmlStringPayload(), this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncCreateRequest(query, 
		        						entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "BookingCollection"), 
		        						this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_BOOKINGCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
        catch (ParserException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_BOOKINGCOLLECTION_ENTRY, null, requestStatus);
             return;
        } 
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
 	/**
     * Executes a create request for a single Travelagency entry.
     */
    public void createTravelagencyCollectionEntry(Travelagency entry)
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getTravelagencyCollectionQuery();
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.CREATE_TRAVELAGENCYCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "TravelagencyCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_POST, contentType, "TravelagencyCollection", data, RMTSAMPLEFLIGHTRequestID.CREATE_TRAVELAGENCYCOLLECTION_ENTRY.name());
            } 
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.CREATE_TRAVELAGENCYCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
	            
	            // execute the query by the connectivity helper
		        if (!this.useJson)
		        {
		        	this.connectivityHelper.executeAsyncCreateRequest(query, entry.getXmlStringPayload(), this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncCreateRequest(query, 
		        						entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "TravelagencyCollection"), 
		        						this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_TRAVELAGENCYCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
        catch (ParserException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_TRAVELAGENCYCOLLECTION_ENTRY, null, requestStatus);
             return;
        } 
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
 	/**
     * Executes a create request for a single Travelagency entry.
     */
    public void createTravelAgenciesEntry(Travelagency entry)
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getTravelAgenciesQuery();
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.CREATE_TRAVELAGENCIES_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "TravelAgencies")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_POST, contentType, "TravelAgencies", data, RMTSAMPLEFLIGHTRequestID.CREATE_TRAVELAGENCIES_ENTRY.name());
            } 
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.CREATE_TRAVELAGENCIES_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
	            
	            // execute the query by the connectivity helper
		        if (!this.useJson)
		        {
		        	this.connectivityHelper.executeAsyncCreateRequest(query, entry.getXmlStringPayload(), this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncCreateRequest(query, 
		        						entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "TravelAgencies"), 
		        						this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_TRAVELAGENCIES_ENTRY, null, requestStatus);
            return;
        }
        catch (ParserException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_TRAVELAGENCIES_ENTRY, null, requestStatus);
             return;
        } 
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
 	/**
     * Executes a create request for a single Subscription entry.
     */
    public void createSubscriptionCollectionEntry(Subscription entry)
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getSubscriptionCollectionQuery();
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.CREATE_SUBSCRIPTIONCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "SubscriptionCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_POST, contentType, "SubscriptionCollection", data, RMTSAMPLEFLIGHTRequestID.CREATE_SUBSCRIPTIONCOLLECTION_ENTRY.name());
            } 
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.CREATE_SUBSCRIPTIONCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
	            
	            // execute the query by the connectivity helper
		        if (!this.useJson)
		        {
		        	this.connectivityHelper.executeAsyncCreateRequest(query, entry.getXmlStringPayload(), this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncCreateRequest(query, 
		        						entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "SubscriptionCollection"), 
		        						this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_SUBSCRIPTIONCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
        catch (ParserException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_SUBSCRIPTIONCOLLECTION_ENTRY, null, requestStatus);
             return;
        } 
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
 	/**
     * Executes a create request for a single Flight entry.
     */
    public void createFlightCollectionEntry(Flight entry)
    {
        try
        {
            // get the query from the proxy
            ODataQuery query = this.service.getFlightCollectionQuery();
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.CREATE_FLIGHTCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "FlightCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_POST, contentType, "FlightCollection", data, RMTSAMPLEFLIGHTRequestID.CREATE_FLIGHTCOLLECTION_ENTRY.name());
            } 
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.CREATE_FLIGHTCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
	            
	            // execute the query by the connectivity helper
		        if (!this.useJson)
		        {
		        	this.connectivityHelper.executeAsyncCreateRequest(query, entry.getXmlStringPayload(), this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncCreateRequest(query, 
		        						entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "FlightCollection"), 
		        						this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_FLIGHTCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
        catch (ParserException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_FLIGHTCOLLECTION_ENTRY, null, requestStatus);
             return;
        } 
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }

	/**
     * Executes an update request for a single Booking entry.
     */
    public void updateBookingCollectionEntry(Booking entry)
    {
        try
        {
            // get the query from the entry
            ODataQuery query = new ODataQuery(entry.getEntry().getId());
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.UPDATE_BOOKINGCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "BookingCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_PUT, 
                contentType, "BookingCollection", data, RMTSAMPLEFLIGHTRequestID.UPDATE_BOOKINGCOLLECTION_ENTRY.name());
            } 
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.UPDATE_BOOKINGCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
	            
	            // execute the query by the connectivity helper
	            if (!this.useJson)
	            {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getXmlStringPayload(), this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getJsonStringPayload(this.service.getParser(),this.service.getSchema(),"BookingCollection"), this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_BOOKINGCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
        catch (ParserException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_BOOKINGCOLLECTION_ENTRY, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
	/**
     * Executes an update request for a single Carrier entry.
     */
    public void updateCarrierCollectionEntry(Carrier entry)
    {
        try
        {
            // get the query from the entry
            ODataQuery query = new ODataQuery(entry.getEntry().getId());
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.UPDATE_CARRIERCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "CarrierCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_PUT, 
                contentType, "CarrierCollection", data, RMTSAMPLEFLIGHTRequestID.UPDATE_CARRIERCOLLECTION_ENTRY.name());
            } 
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.UPDATE_CARRIERCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
	            
	            // execute the query by the connectivity helper
	            if (!this.useJson)
	            {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getXmlStringPayload(), this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getJsonStringPayload(this.service.getParser(),this.service.getSchema(),"CarrierCollection"), this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_CARRIERCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
        catch (ParserException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_CARRIERCOLLECTION_ENTRY, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
	/**
     * Executes an update request for a single Travelagency entry.
     */
    public void updateTravelagencyCollectionEntry(Travelagency entry)
    {
        try
        {
            // get the query from the entry
            ODataQuery query = new ODataQuery(entry.getEntry().getId());
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.UPDATE_TRAVELAGENCYCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "TravelagencyCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_PUT, 
                contentType, "TravelagencyCollection", data, RMTSAMPLEFLIGHTRequestID.UPDATE_TRAVELAGENCYCOLLECTION_ENTRY.name());
            } 
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.UPDATE_TRAVELAGENCYCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
	            
	            // execute the query by the connectivity helper
	            if (!this.useJson)
	            {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getXmlStringPayload(), this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getJsonStringPayload(this.service.getParser(),this.service.getSchema(),"TravelagencyCollection"), this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_TRAVELAGENCYCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
        catch (ParserException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_TRAVELAGENCYCOLLECTION_ENTRY, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
	/**
     * Executes an update request for a single Travelagency entry.
     */
    public void updateTravelAgenciesEntry(Travelagency entry)
    {
        try
        {
            // get the query from the entry
            ODataQuery query = new ODataQuery(entry.getEntry().getId());
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.UPDATE_TRAVELAGENCIES_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "TravelAgencies")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_PUT, 
                contentType, "TravelAgencies", data, RMTSAMPLEFLIGHTRequestID.UPDATE_TRAVELAGENCIES_ENTRY.name());
            } 
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.UPDATE_TRAVELAGENCIES_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
	            
	            // execute the query by the connectivity helper
	            if (!this.useJson)
	            {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getXmlStringPayload(), this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getJsonStringPayload(this.service.getParser(),this.service.getSchema(),"TravelAgencies"), this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_TRAVELAGENCIES_ENTRY, null, requestStatus);
            return;
        }
        catch (ParserException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_TRAVELAGENCIES_ENTRY, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
	/**
     * Executes an update request for a single Subscription entry.
     */
    public void updateSubscriptionCollectionEntry(Subscription entry)
    {
        try
        {
            // get the query from the entry
            ODataQuery query = new ODataQuery(entry.getEntry().getId());
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.UPDATE_SUBSCRIPTIONCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "SubscriptionCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_PUT, 
                contentType, "SubscriptionCollection", data, RMTSAMPLEFLIGHTRequestID.UPDATE_SUBSCRIPTIONCOLLECTION_ENTRY.name());
            } 
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.UPDATE_SUBSCRIPTIONCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
	            
	            // execute the query by the connectivity helper
	            if (!this.useJson)
	            {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getXmlStringPayload(), this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getJsonStringPayload(this.service.getParser(),this.service.getSchema(),"SubscriptionCollection"), this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_SUBSCRIPTIONCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
        catch (ParserException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_SUBSCRIPTIONCOLLECTION_ENTRY, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
	/**
     * Executes an update request for a single Flight entry.
     */
    public void updateFlightCollectionEntry(Flight entry)
    {
        try
        {
            // get the query from the entry
            ODataQuery query = new ODataQuery(entry.getEntry().getId());
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.UPDATE_FLIGHTCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
                String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "FlightCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_PUT, 
                contentType, "FlightCollection", data, RMTSAMPLEFLIGHTRequestID.UPDATE_FLIGHTCOLLECTION_ENTRY.name());
            } 
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.UPDATE_FLIGHTCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
	            
	            // execute the query by the connectivity helper
	            if (!this.useJson)
	            {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getXmlStringPayload(), this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncUpdateRequest(query, entry.getJsonStringPayload(this.service.getParser(),this.service.getSchema(),"FlightCollection"), this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_FLIGHTCOLLECTION_ENTRY, null, requestStatus);
            return;
        }
        catch (ParserException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_FLIGHTCOLLECTION_ENTRY, null, requestStatus);
            return;
        } 
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }

	/**
     * Executes a delete request for a single Booking entry.
     */
    public void deleteBookingCollectionEntry(Booking entry)
    {
        try
        {
            // get the query from the entry
            ODataQuery query = new ODataQuery(entry.getEntry().getId());
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.DELETE_BOOKINGCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
             	String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "BookingCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_DELETE,
                contentType, "BookingCollection", data, RMTSAMPLEFLIGHTRequestID.DELETE_BOOKINGCOLLECTION_ENTRY.name());
            }
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.DELETE_BOOKINGCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // execute the query by the connectivity helper
		        if (!this.useJson)
		        {
		        	this.connectivityHelper.executeAsyncDeleteRequest(query, this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncDeleteRequest(query, this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.DELETE_BOOKINGCOLLECTION_ENTRY, null, requestStatus);
             return;
        }
        catch (ParserException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.DELETE_BOOKINGCOLLECTION_ENTRY, null, requestStatus);
             return;
        }
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
	/**
     * Executes a delete request for a single Travelagency entry.
     */
    public void deleteTravelagencyCollectionEntry(Travelagency entry)
    {
        try
        {
            // get the query from the entry
            ODataQuery query = new ODataQuery(entry.getEntry().getId());
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.DELETE_TRAVELAGENCYCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
             	String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "TravelagencyCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_DELETE,
                contentType, "TravelagencyCollection", data, RMTSAMPLEFLIGHTRequestID.DELETE_TRAVELAGENCYCOLLECTION_ENTRY.name());
            }
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.DELETE_TRAVELAGENCYCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // execute the query by the connectivity helper
		        if (!this.useJson)
		        {
		        	this.connectivityHelper.executeAsyncDeleteRequest(query, this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncDeleteRequest(query, this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.DELETE_TRAVELAGENCYCOLLECTION_ENTRY, null, requestStatus);
             return;
        }
        catch (ParserException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.DELETE_TRAVELAGENCYCOLLECTION_ENTRY, null, requestStatus);
             return;
        }
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
	/**
     * Executes a delete request for a single Travelagency entry.
     */
    public void deleteTravelAgenciesEntry(Travelagency entry)
    {
        try
        {
            // get the query from the entry
            ODataQuery query = new ODataQuery(entry.getEntry().getId());
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.DELETE_TRAVELAGENCIES_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
             	String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "TravelAgencies")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_DELETE,
                contentType, "TravelAgencies", data, RMTSAMPLEFLIGHTRequestID.DELETE_TRAVELAGENCIES_ENTRY.name());
            }
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.DELETE_TRAVELAGENCIES_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // execute the query by the connectivity helper
		        if (!this.useJson)
		        {
		        	this.connectivityHelper.executeAsyncDeleteRequest(query, this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncDeleteRequest(query, this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.DELETE_TRAVELAGENCIES_ENTRY, null, requestStatus);
             return;
        }
        catch (ParserException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.DELETE_TRAVELAGENCIES_ENTRY, null, requestStatus);
             return;
        }
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
	/**
     * Executes a delete request for a single Subscription entry.
     */
    public void deleteSubscriptionCollectionEntry(Subscription entry)
    {
        try
        {
            // get the query from the entry
            ODataQuery query = new ODataQuery(entry.getEntry().getId());
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.DELETE_SUBSCRIPTIONCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
             	String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "SubscriptionCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_DELETE,
                contentType, "SubscriptionCollection", data, RMTSAMPLEFLIGHTRequestID.DELETE_SUBSCRIPTIONCOLLECTION_ENTRY.name());
            }
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.DELETE_SUBSCRIPTIONCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // execute the query by the connectivity helper
		        if (!this.useJson)
		        {
		        	this.connectivityHelper.executeAsyncDeleteRequest(query, this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncDeleteRequest(query, this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.DELETE_SUBSCRIPTIONCOLLECTION_ENTRY, null, requestStatus);
             return;
        }
        catch (ParserException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.DELETE_SUBSCRIPTIONCOLLECTION_ENTRY, null, requestStatus);
             return;
        }
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
	/**
     * Executes a delete request for a single Flight entry.
     */
    public void deleteFlightCollectionEntry(Flight entry)
    {
        try
        {
            // get the query from the entry
            ODataQuery query = new ODataQuery(entry.getEntry().getId());
            
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.DELETE_FLIGHTCOLLECTION_ENTRY, entry);
            
            if (this.connectivityHelper.getBatchRequest() != null)
            {
             	String contentType = "application/atom+xml";
                byte[] data = null;
                if (this.useJson)
                {
                    contentType = "application/json";
                    data = entry.getJsonStringPayload(this.service.getParser(), this.service.getSchema(), "FlightCollection")
                            .getBytes();
                } 
                else
                {
                    data = entry.getStringPayload().getBytes();
                }
                
                // Add request to a change set
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_DELETE,
                contentType, "FlightCollection", data, RMTSAMPLEFLIGHTRequestID.DELETE_FLIGHTCOLLECTION_ENTRY.name());
            }
            else
            {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.DELETE_FLIGHTCOLLECTION_ENTRY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // execute the query by the connectivity helper
		        if (!this.useJson)
		        {
		        	this.connectivityHelper.executeAsyncDeleteRequest(query, this);
		        }
		        else
		        {
		        	this.connectivityHelper.executeAsyncDeleteRequest(query, this);
		        }
	            
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
            }
        } 
        catch (MalformedURLException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.DELETE_FLIGHTCOLLECTION_ENTRY, null, requestStatus);
             return;
        }
        catch (ParserException e)
        {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.DELETE_FLIGHTCOLLECTION_ENTRY, null, requestStatus);
             return;
        }
        catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }

	/**
    * Executes the CheckFlightAvailability function import,
    * with the given parameters.
    *
    * @param airlineid
    * @param connectionid
    * @param flightdate
    */
    public void executeCheckFlightAvailability(String airlineid, String connectionid, Date flightdate) 
    {
    	try
        {
             // get the query from the proxy
             ODataQuery query = this.service.CheckFlightAvailabilityQuery(airlineid, connectionid, flightdate);
             
             if (this.connectivityHelper.getBatchRequest() != null)
             {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.EXECUTE_CHECKFLIGHTAVAILABILITY.name());
             } 
             else
             {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.EXECUTE_CHECKFLIGHTAVAILABILITY.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
             
				// execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
             }
         }
         catch (MalformedURLException e)
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.EXECUTE_CHECKFLIGHTAVAILABILITY, null, requestStatus);
         } 
    	 catch (UnsupportedEncodingException e) 
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.EXECUTE_CHECKFLIGHTAVAILABILITY, null, requestStatus);
		}
		catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
    
    /**
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void executeCheckFlightAvailabilityCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse) 
    {
    	  RequestStatus requestStatus;
    	  
          List<FlightAvailability> entries = null;
          String message = null;
          
          // check for valid response
          if (aResponse == null) 
          {
              requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
              this.logger.e(TAG, "executeCheckFlightAvailabilityCompleted method: the response is null");
              // notify listeners
              notifyListenersForRequestCompleted(requestID, null, requestStatus);
              return;
          }
          
          try
          {
              // parse the data
              String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
              
			  entries = new ArrayList<FlightAvailability>();
              entries.add(this.service.CheckFlightAvailability(data));
              requestStatus = new RequestStatus(StatusType.OK, null, null);
          } 
          catch (ParseException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }   
              else
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          } 
          catch (IOException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }
              else
              {
                  requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          }
          catch (ParserException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }
              else
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          }
          
          // notify listeners of the response, that might include an error response
          notifyListenersForRequestCompleted(requestID, entries, requestStatus);
	}
	/**
    * Executes the GetAvailableFlights function import,
    * with the given parameters.
    *
    * @param fromdate
    * @param todate
    * @param cityfrom
    * @param cityto
    */
    public void executeGetAvailableFlights(Date fromdate, Date todate, String cityfrom, String cityto) 
    {
    	try
        {
             // get the query from the proxy
             ODataQuery query = this.service.GetAvailableFlightsQuery(fromdate, todate, cityfrom, cityto);
             
             if (this.connectivityHelper.getBatchRequest() != null)
             {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.EXECUTE_GETAVAILABLEFLIGHTS.name());
             } 
             else
             {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.EXECUTE_GETAVAILABLEFLIGHTS.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
             
				// execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
             }
         }
         catch (MalformedURLException e)
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.EXECUTE_GETAVAILABLEFLIGHTS, null, requestStatus);
         } 
    	 catch (UnsupportedEncodingException e) 
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.EXECUTE_GETAVAILABLEFLIGHTS, null, requestStatus);
		}
		catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
    
    /**
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void executeGetAvailableFlightsCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse) 
    {
    	  RequestStatus requestStatus;
    	  
          List<Flight> entries = null;
          String message = null;
          
          // check for valid response
          if (aResponse == null) 
          {
              requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
              this.logger.e(TAG, "executeGetAvailableFlightsCompleted method: the response is null");
              // notify listeners
              notifyListenersForRequestCompleted(requestID, null, requestStatus);
              return;
          }
          
          try
          {
              // parse the data
              String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
              
              entries = this.service.GetAvailableFlights(data);
              requestStatus = new RequestStatus(StatusType.OK, null, null);
          } 
          catch (ParseException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }   
              else
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          } 
          catch (IOException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }
              else
              {
                  requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          }
          catch (ParserException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }
              else
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          }
          
          // notify listeners of the response, that might include an error response
          notifyListenersForRequestCompleted(requestID, entries, requestStatus);
	}
	/**
    * Executes the GetFlightDetails function import,
    * with the given parameters.
    *
    * @param airlineid
    * @param connectionid
    */
    public void executeGetFlightDetails(String airlineid, String connectionid) 
    {
    	try
        {
             // get the query from the proxy
             ODataQuery query = this.service.GetFlightDetailsQuery(airlineid, connectionid);
             
             if (this.connectivityHelper.getBatchRequest() != null)
             {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.EXECUTE_GETFLIGHTDETAILS.name());
             } 
             else
             {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.EXECUTE_GETFLIGHTDETAILS.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
             
				// execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
             }
         }
         catch (MalformedURLException e)
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.EXECUTE_GETFLIGHTDETAILS, null, requestStatus);
         } 
    	 catch (UnsupportedEncodingException e) 
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.EXECUTE_GETFLIGHTDETAILS, null, requestStatus);
		}
		catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
    
    /**
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void executeGetFlightDetailsCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse) 
    {
    	  RequestStatus requestStatus;
    	  
          List<FlightDetails> entries = null;
          String message = null;
          
          // check for valid response
          if (aResponse == null) 
          {
              requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
              this.logger.e(TAG, "executeGetFlightDetailsCompleted method: the response is null");
              // notify listeners
              notifyListenersForRequestCompleted(requestID, null, requestStatus);
              return;
          }
          
          try
          {
              // parse the data
              String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
              
			  entries = new ArrayList<FlightDetails>();
              entries.add(this.service.GetFlightDetails(data));
              requestStatus = new RequestStatus(StatusType.OK, null, null);
          } 
          catch (ParseException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }   
              else
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          } 
          catch (IOException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }
              else
              {
                  requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          }
          catch (ParserException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }
              else
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          }
          
          // notify listeners of the response, that might include an error response
          notifyListenersForRequestCompleted(requestID, entries, requestStatus);
	}
	/**
    * Executes the GetAgencyDetails function import,
    * with the given parameters.
    *
    * @param agency_id
    */
    public void executeGetAgencyDetails(String agency_id) 
    {
    	try
        {
             // get the query from the proxy
             ODataQuery query = this.service.GetAgencyDetailsQuery(agency_id);
             
             if (this.connectivityHelper.getBatchRequest() != null)
             {
                this.connectivityHelper.addRetrieveRequestToBatch(query, RMTSAMPLEFLIGHTRequestID.EXECUTE_GETAGENCYDETAILS.name());
             } 
             else
             {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.EXECUTE_GETAGENCYDETAILS.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
             
				// execute the query by the connectivity helper
	            this.connectivityHelper.executeBasicAsyncRequest(query, this);
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
             }
         }
         catch (MalformedURLException e)
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.EXECUTE_GETAGENCYDETAILS, null, requestStatus);
         } 
    	 catch (UnsupportedEncodingException e) 
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.EXECUTE_GETAGENCYDETAILS, null, requestStatus);
		}
		catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
    
    /**
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void executeGetAgencyDetailsCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse) 
    {
    	  RequestStatus requestStatus;
    	  
          List<Travelagency> entries = null;
          String message = null;
          
          // check for valid response
          if (aResponse == null) 
          {
              requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
              this.logger.e(TAG, "executeGetAgencyDetailsCompleted method: the response is null");
              // notify listeners
              notifyListenersForRequestCompleted(requestID, null, requestStatus);
              return;
          }
          
          try
          {
              // parse the data
              String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
              
			  entries = new ArrayList<Travelagency>();
              entries.add(this.service.GetAgencyDetails(data));
              requestStatus = new RequestStatus(StatusType.OK, null, null);
          } 
          catch (ParseException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }   
              else
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          } 
          catch (IOException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }
              else
              {
                  requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          }
          catch (ParserException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }
              else
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          }
          
          // notify listeners of the response, that might include an error response
          notifyListenersForRequestCompleted(requestID, entries, requestStatus);
	}
	/**
    * Executes the UpdateAgencyPhoneNo function import,
    * with the given parameters.
    *
    * @param agency_id
    * @param telephone
    */
    public void executeUpdateAgencyPhoneNo(String agency_id, String telephone) 
    {
    	try
        {
             // get the query from the proxy
             ODataQuery query = this.service.UpdateAgencyPhoneNoQuery(agency_id, telephone);
             
             if (this.connectivityHelper.getBatchRequest() != null)
             {
                // add request to a change set
                String contentType = "application/atom+xml";
                if (this.useJson)
                {
                    contentType = "application/json";
                } 
                this.connectivityHelper.addRequestToChangeset(query, BaseRequest.REQUEST_METHOD_PUT, contentType,
                        "TravelagencyCollection", null, RMTSAMPLEFLIGHTRequestID.EXECUTE_UPDATEAGENCYPHONENO.name());
             } 
             else
             {
	            // add the gwpa-action header to the request
	            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.EXECUTE_UPDATEAGENCYPHONENO.name());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
	            
	            // add the content-type header to the request
	            ContentTypeHelperDelegateImpl contentTypeDelegate = new ContentTypeHelperDelegateImpl(this.isUseJson());
	            this.connectivityHelper.registerSDMConnectivityHelperDelegate(contentTypeDelegate);
             
				// execute the query by the connectivity helper
	            this.connectivityHelper.executeAsyncUpdateRequest(query, "", this);
	            // unregister the gwpa-action delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
	            // unregister the content-type delegate
	            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(contentTypeDelegate);
             }
         }
         catch (MalformedURLException e)
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.EXECUTE_UPDATEAGENCYPHONENO, null, requestStatus);
         } 
    	 catch (UnsupportedEncodingException e) 
         {
             this.logger.e(TAG, e.getLocalizedMessage());
             RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
             notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.EXECUTE_UPDATEAGENCYPHONENO, null, requestStatus);
		}
		catch (ConnectivityException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
        }
    }
    
    /**
     * This method checks for valid response, parses it 
     * and notifies the listener.
     */
    private void executeUpdateAgencyPhoneNoCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse) 
    {
    	  RequestStatus requestStatus;
    	  
          List<Travelagency> entries = null;
          String message = null;
          
          // check for valid response
          if (aResponse == null) 
          {
              requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
              this.logger.e(TAG, "executeUpdateAgencyPhoneNoCompleted method: the response is null");
              // notify listeners
              notifyListenersForRequestCompleted(requestID, null, requestStatus);
              return;
          }
          
          try
          {
              // parse the data
              String data = EntityUtils.toString(aResponse.getEntity(), "UTF-8");
              
			  entries = new ArrayList<Travelagency>();
              entries.add(this.service.UpdateAgencyPhoneNo(data));
              requestStatus = new RequestStatus(StatusType.OK, null, null);
          } 
          catch (ParseException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }   
              else
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          } 
          catch (IOException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }
              else
              {
                  requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          }
          catch (ParserException e)
          {
              message = parseErrorResponseFromServer(aResponse);
              if (message == null)
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                  this.logger.e(TAG, e.getLocalizedMessage());
              }
              else
              {
                  requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                  this.logger.e(TAG, e.getLocalizedMessage());
                  this.logger.e(TAG, "Error response from server: " + message);
              }
          }
          
          // notify listeners of the response, that might include an error response
          notifyListenersForRequestCompleted(requestID, entries, requestStatus);
	}

    
    /**
     * Creates a media link resource to the collection for the given slug and content-type
	 * @param slug HTTP entity-header which servers MAY use when creating the Member URI of the newly created Resource
	 * @param contentType content type of the media link resource
     * @param body byte array of the resource
     */
    public void createCarrierCollectionMediaLink(String slug, String contentType, byte[] body)
    {
        try
        {
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.CREATE_CARRIERCOLLECTION_MEDIA_LINK, contentType); 

            // add the gwpa-action header to the request
            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.CREATE_CARRIERCOLLECTION_MEDIA_LINK.name());
            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
            
            MediaLink mediaLink = new MediaLink(this.service.getCarrierCollectionQuery(), contentType, slug);

            // execute the query by the connectivity helper
            this.connectivityHelper.executeAsyncCreateMediaLinkRequest(mediaLink, body, this);

            // unregister the gwpa-action delegate
            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.CREATE_CARRIERCOLLECTION_MEDIA_LINK, null, requestStatus);
            return;
        }
    }

    /**
     * Loads the media link resource of the given entry
     * @param entry
     */
    public void loadCarrierMediaLink(Carrier entry)
    {
        try
        {
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIER_MEDIA_LINK, entry); 

            // add the gwpa-action header to the request
            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIER_MEDIA_LINK.name());
            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);

            // execute the query by the connectivity helper
            this.connectivityHelper.executeBasicAsyncRequest(entry.getMediaLinkRead().getQuery(), this);

            // unregister the gwpa-action delegate
            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.LOAD_CARRIER_MEDIA_LINK, null, requestStatus);
            return;
        }
    }
    
    /**
     * Updates a media resource of the given entry
     * @param entry
     * @param body byte array of the resource
     */
    public void updateCarrierMediaLink(Carrier entry, byte[] body)
    {
        try
        {
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.UPDATE_CARRIER_MEDIA_LINK, entry); 

            // add the gwpa-action header to the request
            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.UPDATE_CARRIER_MEDIA_LINK.name());
            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);

            // execute the query by the connectivity helper
            this.connectivityHelper.executeAsyncUpdateMediaLinkRequest(entry.getMediaLinkEdit(), body, this);

            // unregister the gwpa-action delegate
            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.UPDATE_CARRIER_MEDIA_LINK, null, requestStatus);
            return;
        }
    }
    
    /**
     * Deletes the media resource of the given entry
     * @param entry
     */
    public void deleteCarrierMediaLink(Carrier entry)
    {
        try
        {
            // put in the map
            this.requestsIdentifierMap.put(RMTSAMPLEFLIGHTRequestID.DELETE_CARRIER_MEDIA_LINK, entry); 

            // add the gwpa-action header to the request
            ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(RMTSAMPLEFLIGHTRequestID.DELETE_CARRIER_MEDIA_LINK.name());
            this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);

            // execute the query by the connectivity helper
            this.connectivityHelper.executeAsyncDeleteMediaLinkRequest(entry.getMediaLinkEdit(), this);

            // unregister the gwpa-action delegate
            this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
        } 
        catch (MalformedURLException e)
        {
            this.logger.e(TAG, e.getLocalizedMessage());
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID.DELETE_CARRIER_MEDIA_LINK, null, requestStatus);
            return;
        }
    }

    /**
     * The request reaches here when it succeeds.
     */
    public void onSuccess(IRequest aRequest, IResponse aResponse)
    {
        // get the request ID from the header
        String id = aRequest.getHeaders().get(GWPA_ACTION);
        
        if (id.equalsIgnoreCase("batch"))
        {
            batchCompleted(aRequest, aResponse);
            return;
        }
        
        RMTSAMPLEFLIGHTRequestID requestID = RMTSAMPLEFLIGHTRequestID.valueOf(id);
        
        if (requestID == null)
        {
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, null, "Couldn't find the request ID of the given request URL");
            this.logger.e(TAG, "Error in onSuccess method: couldn't find the request ID of the given request URL");
            // notify listeners
            notifyListenersForRequestCompleted(null, null, requestStatus);
            return;
        }
        
        switch (requestID)
        {
		case LOAD_BOOKINGCOLLECTION:
        {
            loadBookingCollectionCompleted(requestID, aResponse);
            break;
        }
		case LOAD_CARRIERCOLLECTION:
        {
            loadCarrierCollectionCompleted(requestID, aResponse);
            break;
        }
		case LOAD_TRAVELAGENCYCOLLECTION:
        {
            loadTravelagencyCollectionCompleted(requestID, aResponse);
            break;
        }
		case LOAD_TRAVELAGENCIES:
        {
            loadTravelAgenciesCompleted(requestID, aResponse);
            break;
        }
		case LOAD_SUBSCRIPTIONCOLLECTION:
        {
            loadSubscriptionCollectionCompleted(requestID, aResponse);
            break;
        }
		case LOAD_FLIGHTCOLLECTION:
        {
            loadFlightCollectionCompleted(requestID, aResponse);
            break;
        }
        case LOAD_BOOKINGCOLLECTION_ENTRY:
        {
            loadBookingCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case LOAD_TRAVELAGENCYCOLLECTION_ENTRY:
        {
            loadTravelagencyCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case LOAD_CARRIERCOLLECTION_ENTRY:
        {
            loadCarrierCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case LOAD_FLIGHTCOLLECTION_ENTRY:
        {
            loadFlightCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case LOAD_SUBSCRIPTIONCOLLECTION_ENTRY:
        {
            loadSubscriptionCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case LOAD_TRAVELAGENCIES_ENTRY:
        {
            loadTravelAgenciesEntryCompleted(requestID, aResponse);
            break;
        }
		case LOAD_FLIGHTBOOKING_FOR_FLIGHT:
        {
            loadFlightbookingForFlightCompleted(requestID, aResponse);
            break;
        }
		case LOAD_FLIGHTBOOKINGS_FOR_FLIGHT:
        {
            loadFlightBookingsForFlightCompleted(requestID, aResponse);
            break;
        }
		case LOAD_FLIGHTCARRIER_FOR_FLIGHT:
        {
            loadFlightCarrierForFlightCompleted(requestID, aResponse);
            break;
        }
		case LOAD_BOOKEDFLIGHT_FOR_BOOKING:
        {
            loadBookedFlightForBookingCompleted(requestID, aResponse);
            break;
        }
		case LOAD_CARRIERFLIGHTS_FOR_CARRIER:
        {
            loadCarrierFlightsForCarrierCompleted(requestID, aResponse);
            break;
        }
        case CREATE_BOOKINGCOLLECTION_ENTRY:
        {
            loadBookingCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case CREATE_TRAVELAGENCYCOLLECTION_ENTRY:
        {
            loadTravelagencyCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case CREATE_TRAVELAGENCIES_ENTRY:
        {
            loadTravelAgenciesEntryCompleted(requestID, aResponse);
            break;
        }
        case CREATE_SUBSCRIPTIONCOLLECTION_ENTRY:
        {
            loadSubscriptionCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case CREATE_FLIGHTCOLLECTION_ENTRY:
        {
            loadFlightCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case UPDATE_BOOKINGCOLLECTION_ENTRY:
        {
            loadBookingCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case UPDATE_CARRIERCOLLECTION_ENTRY:
        {
            loadCarrierCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case UPDATE_TRAVELAGENCYCOLLECTION_ENTRY:
        {
            loadTravelagencyCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case UPDATE_TRAVELAGENCIES_ENTRY:
        {
            loadTravelAgenciesEntryCompleted(requestID, aResponse);
            break;
        }
        case UPDATE_SUBSCRIPTIONCOLLECTION_ENTRY:
        {
            loadSubscriptionCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case UPDATE_FLIGHTCOLLECTION_ENTRY:
        {
            loadFlightCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case DELETE_BOOKINGCOLLECTION_ENTRY:
        {
            loadBookingCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case DELETE_TRAVELAGENCYCOLLECTION_ENTRY:
        {
            loadTravelagencyCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case DELETE_TRAVELAGENCIES_ENTRY:
        {
            loadTravelAgenciesEntryCompleted(requestID, aResponse);
            break;
        }
        case DELETE_SUBSCRIPTIONCOLLECTION_ENTRY:
        {
            loadSubscriptionCollectionEntryCompleted(requestID, aResponse);
            break;
        }
        case DELETE_FLIGHTCOLLECTION_ENTRY:
        {
            loadFlightCollectionEntryCompleted(requestID, aResponse);
            break;
        }
		case EXECUTE_CHECKFLIGHTAVAILABILITY:
        {
            executeCheckFlightAvailabilityCompleted(requestID, aResponse);
            break;
        }
		case EXECUTE_GETAVAILABLEFLIGHTS:
        {
            executeGetAvailableFlightsCompleted(requestID, aResponse);
            break;
        }
		case EXECUTE_GETFLIGHTDETAILS:
        {
            executeGetFlightDetailsCompleted(requestID, aResponse);
            break;
        }
		case EXECUTE_GETAGENCYDETAILS:
        {
            executeGetAgencyDetailsCompleted(requestID, aResponse);
            break;
        }
		case EXECUTE_UPDATEAGENCYPHONENO:
        {
            executeUpdateAgencyPhoneNoCompleted(requestID, aResponse);
            break;
        }
		case CREATE_CARRIERCOLLECTION_MEDIA_LINK:
        {
            loadCarrierMediaLinkCompleted(requestID, aResponse);
            break;
        }
        case UPDATE_CARRIER_MEDIA_LINK:
        {
            loadCarrierMediaLinkCompleted(requestID, aResponse);
            break;
        }
        case DELETE_CARRIER_MEDIA_LINK:
        {
            loadCarrierMediaLinkCompleted(requestID, aResponse);
            break;
        }
        case LOAD_CARRIER_MEDIA_LINK:
        {
            loadCarrierMediaLinkCompleted(requestID, aResponse);
            break;
        }
        default:
            break; 
        }
        this.requestsIdentifierMap.remove(requestID);
    }
    
    
    private void loadCarrierMediaLinkCompleted(RMTSAMPLEFLIGHTRequestID requestID, IResponse aResponse)
    {
        RequestStatus requestStatus;

        List<byte[]> entries = null;
        String message = null;

        // check for valid response
        if (aResponse == null)
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "loadCarrierMediaLinkCompleted method: the response is null");
            // notify listeners
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
            return;
        }

        try
        {
            final byte[] data = EntityUtils.toByteArray(aResponse.getEntity());

            Object object = this.requestsIdentifierMap.get(requestID);

            this.requestsIdentifierMap.remove(requestID);

            if (object == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The entry of the request is null");
                this.logger.e(TAG, "loadCarrierMediaLinkCompleted method: the entry of the request is null");
                // notify listeners
                notifyListenersForRequestCompleted(requestID, null, requestStatus);
                return;
            }

            entries = new ArrayList<byte[]>();

            entries.add(data);

            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            } 
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        } 
        catch (IOException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            } 
            else
            {
                requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }

        // notify listeners of the response, that might include an error
        // response
        notifyListenersForRequestCompleted(requestID, entries, requestStatus);
    }
    
    /**
     * The request comes here in case of an error occurred.
     */
    public void onError(IRequest aRequest, IResponse aResponse,
            IRequestStateElement aRequestStateElement)
    {
       // get the request ID from the map
        String id = aRequest.getHeaders().get(GWPA_ACTION);
        
        RMTSAMPLEFLIGHTRequestID requestID;
        if (id.equalsIgnoreCase("batch"))
        {
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, null, null);
            notifyListenersForBatchCompleted(id, aResponse, requestStatus);
            return;
        }
        else
        {
            requestID = RMTSAMPLEFLIGHTRequestID.valueOf(id);
            
            this.requestsIdentifierMap.remove(requestID);
        }
        
        final int errorcode = aRequestStateElement.getErrorCode();
        String emessage = "";
        boolean authenticationNeeded = false;
        
        switch (errorcode)
        {
        case RequestStateElement.AUTHENTICATION_ERROR:
            emessage = "Authentication error.";
            authenticationNeeded = true;
            break;
        case RequestStateElement.CLIENT_ERROR:
            emessage = "Client error.";
            break;
        case RequestStateElement.HTTP_ERROR:
            emessage = "HTTP error.";
            break;
        case RequestStateElement.NETWORK_ERROR:
            emessage = "Network error.";
            break;
        case RequestStateElement.PARSE_ERROR:
            emessage = "Parse error.";
            break;
        default:
            if (emessage.length() != 0)
            {
                break;
            }
            emessage = "Unknown error.";
            this.logger.e(TAG,
                    "Error while performing request: library error: unknown value in RequestStateElement.getErrorCode()");
            break;
        }
        
        // get the exception - if any
        final Exception e = aRequestStateElement.getException();
        // exception may be null
        if (e != null)
        {
            String messageString = "Error in making request. \n" + e.toString();
            this.logger.e(TAG + ": " + emessage, messageString);
            
            if (authenticationNeeded)
            {
            	removeJsonHeaders();
                notifyListenersForAuthentication(e.getLocalizedMessage());
                return;
            }
            
            RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e, e.getLocalizedMessage());
            notifyListenersForRequestCompleted(requestID, null, requestStatus);
        }
        else // no exception
        {
            try
            {
                if (null != aResponse)
                {
                    String responseString = parseErrorResponseFromServer(aResponse);
                    if (responseString != null)
                    {
                        this.logger.e(TAG + ": " + emessage, responseString);
                        
                        if (authenticationNeeded)
                        {
                            notifyListenersForAuthentication(responseString);
                            return;
                        }
                        
                        RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, null, responseString);
                        notifyListenersForRequestCompleted(requestID, null, requestStatus);
                    }
                }
            }
            catch (org.apache.http.ParseException e1)
            {
                this.logger.e(TAG + ": " + emessage, e1.getLocalizedMessage());
                
                RequestStatus requestStatus = new RequestStatus(StatusType.SERVER_ERROR, e1, e1.getLocalizedMessage());
                notifyListenersForRequestCompleted(requestID, null, requestStatus);
            }
        }
    }

    /*
     * Parses the error response coming from the server,
     * and returns null if there isn't one.
     */
    private String parseErrorResponseFromServer(IResponse aResponse)
    {
        String responseString = "";
        String response = null;
        
        HttpEntity responseEntity = aResponse.getEntity();
        if (responseEntity == null)
        {
        	return null;
        }
        
        try
        {
            response = EntityUtils.toString(responseEntity, "UTF-8");
        } 
        catch (ParseException e)
        {
            return null;
        } 
        catch (IOException e)
        {
            return null;
        }
                
        if(!useJson)
        {
	        Pattern pattern = Pattern.compile("<message.*>(.*)</message>");
	        Matcher matcher = pattern.matcher(response);
	        while (matcher.find())
	        {
	            responseString = matcher.group(1);
	        }
        }else{
        	try {
        	    JSONObject jsonErrorObject = new JSONObject(response);
        	    JSONObject errorMessageJsonObject = jsonErrorObject.getJSONObject("error").getJSONObject("message");
        	    responseString = errorMessageJsonObject.getString("value");
        	} catch (JSONException e) {
        		return null;
        	}
        }
        return responseString;
    }
    
    
    /**
     * Registers the given listener to the Request Handler.
     * 
     * @param newListener - the listener to register.
     * @param requestIDs - may be passed as a single request ID or as a sequence of request IDs.
     */
    public void register(IRMTSAMPLEFLIGHTRequestHandlerListener newListener, RMTSAMPLEFLIGHTRequestID... requestIDs)
    {
        ListenerWrapper listenerWrapper = new ListenerWrapper(newListener, requestIDs);
        this.listenerWrappers.add(listenerWrapper);
    }
    
    /**
     * Unregisters the given listener.
     * @param deleteListener - the listener to unregister.
     */
    public void unregister(IRMTSAMPLEFLIGHTRequestHandlerListener deleteListener)
    {
        for (ListenerWrapper listenerWrapper : this.listenerWrappers)
        {
            IRMTSAMPLEFLIGHTRequestHandlerListener listener = listenerWrapper.getListener();
            if (listener.equals(deleteListener))
            {
                int listenerWrapperIndex =  this.listenerWrappers.indexOf(listenerWrapper);
                this.listenerWrappers.remove(listenerWrapperIndex);
            }
        }
    }
    
    
    /**
     * Notifies the listeners only regarding the requests they've registered to.
     * 
     * @param requestID - the request ID.
     * @param entries - the parsed entries.
     * @param requestStatus - the status of the request (OK, ERROR, etc.)
     */
    public void notifyListenersForRequestCompleted(RMTSAMPLEFLIGHTRequestID requestID, List<?> entries, RequestStatus requestStatus) 
    {
        // go over all listener wrappers
        for (ListenerWrapper listenerWrapper : this.listenerWrappers)
        {
            List<RMTSAMPLEFLIGHTRequestID> requestIDs = listenerWrapper.getRequestIDs();
            for (RMTSAMPLEFLIGHTRequestID listenerRequestID : requestIDs)
            {
                // check if the given request is the request the listener has registered to
                if (listenerRequestID == requestID)
                {
                    // only if so, notify the listener
                    IRMTSAMPLEFLIGHTRequestHandlerListener listener = listenerWrapper.getListener();
                    listener.requestCompleted(requestID, entries, requestStatus);
                }
            }
        }
    }
    
    /**
     * Notify all listeners when authentication is needed.
     */
    public void notifyListenersForAuthentication(String message) 
    {
        // go over all listener wrappers
        for (ListenerWrapper listenerWrapper : this.listenerWrappers)
        {
            IRMTSAMPLEFLIGHTRequestHandlerListener listener = listenerWrapper.getListener();
            listener.authenticationNeeded(message);
        }
    }
    
    /**
     * Returns the connectivity helper class.
     * @return - connectivity helper class.
     */
    public SDMConnectivityHelper getConnectivityHelper() 
    {
		return connectivityHelper;
	}
	
	/**
     * Returns the ServiceDocument class.
     * @return - ServiceDocument class.
     */
	 public IODataServiceDocument getService() 
	 {
	  	return this.service.getServiceDocument();
	 }
	 
	/**
     * Initiates a batch request object which all following calls made by the RequestHandler will be aggregated into. 
     * Optionally the method receives a notification id string that users can listen on and get notified once batch is completed
     * 
     * @param batchId - id of batch request.
     */
    public void startBatch(String batchId)
    {
        this.connectivityHelper.startBatch(batchId, this.service.getBaseUrl());
    }
	 
	 
	/**
     * Executes the batch request initiated in the startBatch method.
     */
    public void executeBatch()
    {
        if (this.connectivityHelper.getBatchRequest() != null)
        {
            try
            {
                // add the gwpa-action header to the request
                ActionHelperDelegateImpl actionDelegate = new ActionHelperDelegateImpl(BATCH);
                        
                this.connectivityHelper.registerSDMConnectivityHelperDelegate(actionDelegate);
                
                this.connectivityHelper.executeAsyncBatchRequest(this);
                
                // unregister the gwpa-action delegate
                this.connectivityHelper.unregisterSDMConnectivityHelperDelegate(actionDelegate);
                
                // cleans the batch object
                this.connectivityHelper.setBatchRequest(null);

            } 
            catch (MalformedURLException e1)
            {
                this.logger.e(TAG + ": " + "MalformedURLException", e1.getLocalizedMessage());
            }
        }
    }

    /**
     * Closes existing changeset.
     */
    public void closeExistingChangeset() 
    {
        if (this.connectivityHelper.getBatchRequest() != null)
        {
            try
            {
                this.connectivityHelper.getBatchRequest().closeExistingChangeSet();
            } 
            catch (ConnectivityException e)
            {
                this.logger.e(TAG + ": " + "ConnectivityException", e.getLocalizedMessage());
            }
        }
    }
    
    private void batchCompleted(IRequest aRequest, IResponse aResponse)
    {
        RequestStatus requestStatus;
        String message = null;

        // get the batch ID from the header
        String batchId = aRequest.getHeaders().get(GWPA_BATCH_ACTION);

        // check for valid response
        if (aResponse == null)
        {
            requestStatus = new RequestStatus(StatusType.PARSE_ERROR, null, "The response is null");
            this.logger.e(TAG, "batchCompleted method: the response is null");
            notifyListenersForBatchCompleted(batchId, aResponse, requestStatus);
            return;
        }

        try
        {
            HashMap<IRequest, HttpResponse> batchResponseMap = aResponse.getBatchResponseMap();
            Set<IRequest> keySet = batchResponseMap.keySet();
            for (IRequest iRequest : keySet)
            {
                // build IResponse to pass to onSuccess/onError
                HttpResponse httpResponse = batchResponseMap.get(iRequest);
                IResponse res = new ResponseImpl((BasicStatusLine) httpResponse.getStatusLine());
                res.setEntity(httpResponse.getEntity());
                if (httpResponse.getStatusLine().getStatusCode() == 400 || httpResponse.getStatusLine().getStatusCode() == 500)
                {
                    IRequestStateElement stateElement = new RequestStateElement();
                    stateElement.setErrorCode(0);
                    onError(iRequest, res, stateElement);
                }
                else
                {
                    onSuccess(iRequest, res);
                }
            }

            requestStatus = new RequestStatus(StatusType.OK, null, null);
        } 
        catch (ParseException e)
        {
            message = parseErrorResponseFromServer(aResponse);
            if (message == null)
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, e.getLocalizedMessage());
                this.logger.e(TAG, e.getLocalizedMessage());
            } 
            else
            {
                requestStatus = new RequestStatus(StatusType.PARSE_ERROR, e, message);
                this.logger.e(TAG, e.getLocalizedMessage());
                this.logger.e(TAG, "Error response from server: " + message);
            }
        }

        // notify the listeners with the response, that might include an error
        notifyListenersForBatchCompleted(batchId, aResponse, requestStatus);
    }

    private void notifyListenersForBatchCompleted(String batchId, IResponse aResponse, RequestStatus requestStatus)
    {
        // go over all listener wrappers
        for (ListenerWrapper listenerWrapper : this.listenerWrappers)
        {
            // only if so, notify the listener
            IRMTSAMPLEFLIGHTRequestHandlerListener listener = listenerWrapper.getListener();
            listener.batchCompleted(batchId, aResponse, requestStatus);
        }
    }
}

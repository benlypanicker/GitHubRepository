package com.example.rmtsampleflight.v1;

/*
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
*/

import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URLEncoder;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import android.content.res.Resources.NotFoundException;

import com.example.rmtsampleflight.v1.complextypes.FlightAvailability;
import com.example.rmtsampleflight.v1.complextypes.FlightDetails;
import com.example.rmtsampleflight.v1.entitytypes.Booking;
import com.example.rmtsampleflight.v1.entitytypes.Carrier;
import com.example.rmtsampleflight.v1.entitytypes.Flight;
import com.example.rmtsampleflight.v1.entitytypes.Notification;
import com.example.rmtsampleflight.v1.entitytypes.Subscription;
import com.example.rmtsampleflight.v1.entitytypes.Travelagency;
import com.sap.gwpa.proxy.ODataQuery;
import com.sap.gwpa.proxy.TypeConverter;
import com.sap.mobile.lib.configuration.IPreferences;
import com.sap.mobile.lib.configuration.Preferences;
import com.sap.mobile.lib.configuration.PreferencesException;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataFunctionImport;
import com.sap.mobile.lib.parser.IODataProperty;
import com.sap.mobile.lib.parser.IODataSchema;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.IParser;
import com.sap.mobile.lib.parser.Parser;
import com.sap.mobile.lib.parser.ParserException;
import com.sap.mobile.lib.supportability.ILogger;
import com.sap.mobile.lib.supportability.Logger;


/**
 * RMTSAMPLEFLIGHTService Proxy Class 
 * <br>OData Channel - Reference SFlight Data Provider
 * <br>Service Version: v1. */
public class RMTSAMPLEFLIGHTService
{
    private String baseUrl;
	
    private ILogger logger;
    private IPreferences preferences;
    private IParser parser;

    private IODataServiceDocument serviceDocument;
    private IODataSchema schema;
   
    /**
     * Constructs a new service (proxy) class, with the given parameters.
     * @param context - application context.
     * @param aServiceDocument - service document.
     * @param aServiceMetadata - service metadata.
     */
   	public RMTSAMPLEFLIGHTService(android.content.Context context, String aServiceDocument, String aServiceMetadata)
   	{
    	initISDMParameters(context);
    	parseServiceDocumentAndMetadata(context, aServiceDocument, aServiceMetadata);
   	}
   	
    /**
     * Constructs a new service (proxy) class, with the given parameter.
     * @param context - application context.
     */
    public RMTSAMPLEFLIGHTService(android.content.Context context)
    {
    	this(context, null, null);
    }
	
    /*
     * Parses the service document and metadata.
     */
    private void parseServiceDocumentAndMetadata(android.content.Context context, String aServiceDocument, String aServiceMetadata)
    {
    	try 
    	{
			if (aServiceDocument == null || aServiceMetadata == null)
			{
				serviceDocument = parser.parseODataServiceDocument(context.getResources().openRawResource(com.example.R.raw.rmtsampleflightv1document));
				schema = parser.parseODataSchema(context.getResources().openRawResource(com.example.R.raw.rmtsampleflightv1metadata),serviceDocument);
			}
			else
			{
				serviceDocument = parser.parseODataServiceDocument(aServiceDocument);
				schema = parser.parseODataSchema(aServiceMetadata,serviceDocument);
			}	
            			
			setUrl(serviceDocument.getBaseUrl());
			loadLabels();
        }
 		catch (NotFoundException e)
		{
			throw new ExceptionInInitializerError(e);
		} 
		catch (IllegalArgumentException e) 
		{
			throw new ExceptionInInitializerError(e);
		} 
		catch (ParserException e) 
		{
			throw new ExceptionInInitializerError(e);
		}	
    }
    
    private void initISDMParameters(android.content.Context context)
    {
    	logger = new Logger();
		preferences = new Preferences(context, logger);
		
		try 
		{
			preferences.setBooleanPreference(IPreferences.PERSISTENCE_SECUREMODE, false);
			parser = new Parser(preferences, logger);
		} 
		catch (PreferencesException e) 
		{
			throw new ExceptionInInitializerError(e);
		}
		catch (ParserException e) 
		{
			throw new ExceptionInInitializerError(e);
		}
    }
	
    /**
     * Returns the parser of this proxy class.
     * @return IParser.
     */
	public IParser getParser() 
	{
		return this.parser;
	}

	/**
	 * Returns the service document.
	 * @return - IODataServiceDocument.
	 */
	public IODataServiceDocument getServiceDocument() 
	{
		return this.serviceDocument;
	}

	/**
	 * Returns the schema of the service.
	 * @return - IODataSchema.
	 */
	public IODataSchema getSchema() 
	{
		return this.schema;
	}

    /**
     * Returns the base URL of the service.
     * @return - the base URL of the service.
     */
    public String getBaseUrl() 
	{
		return this.baseUrl;
    }
    
    /**
     * Sets the base URL of the service.
     * @param url - the url to set.
     */
    public void setUrl(String url) 
	{
		if (url.endsWith("/"))
    	{
    		baseUrl = url;
    	}
    	else
    	{
    		baseUrl = url + "/";
    	}
    }
	
	/**
     * Loads the labels for each entity type.
     * This method is called by the class initialisers.
     */
    public void loadLabels()
	{
		Subscription.loadLabels(this.serviceDocument);
		Notification.loadLabels(this.serviceDocument);
		Flight.loadLabels(this.serviceDocument);
		Booking.loadLabels(this.serviceDocument);
		Carrier.loadLabels(this.serviceDocument);
		Travelagency.loadLabels(this.serviceDocument);
	}
	
// service collections

    /**
     * @return - the BookingCollectionQuery
     * @throws - MalformedURLException
     */
    public ODataQuery getBookingCollectionQuery() throws MalformedURLException
    {
		return new ODataQuery(getBaseUrl() + "BookingCollection");
    }

    /**
     * @return - the CarrierCollectionQuery
     * @throws - MalformedURLException
     */
    public ODataQuery getCarrierCollectionQuery() throws MalformedURLException
    {
		return new ODataQuery(getBaseUrl() + "CarrierCollection");
    }

    /**
     * @return - the TravelagencyCollectionQuery
     * @throws - MalformedURLException
     */
    public ODataQuery getTravelagencyCollectionQuery() throws MalformedURLException
    {
		return new ODataQuery(getBaseUrl() + "TravelagencyCollection");
    }

    /**
     * @return - the TravelAgenciesQuery
     * @throws - MalformedURLException
     */
    public ODataQuery getTravelAgenciesQuery() throws MalformedURLException
    {
		return new ODataQuery(getBaseUrl() + "TravelAgencies");
    }

    /**
     * @return - the SubscriptionCollectionQuery
     * @throws - MalformedURLException
     */
    public ODataQuery getSubscriptionCollectionQuery() throws MalformedURLException
    {
		return new ODataQuery(getBaseUrl() + "SubscriptionCollection");
    }

    /**
     * @return - the NotificationCollectionQuery
     * @throws - MalformedURLException
     */
    public ODataQuery getNotificationCollectionQuery() throws MalformedURLException
    {
		return new ODataQuery(getBaseUrl() + "NotificationCollection");
    }

    /**
     * @return - the FlightCollectionQuery
     * @throws - MalformedURLException
     */
    public ODataQuery getFlightCollectionQuery() throws MalformedURLException
    {
		return new ODataQuery(getBaseUrl() + "FlightCollection");
    }
	

   /**
    * BookingCollectionQuery with Key
    *
    * @throws MalformedURLException 
    */
    public ODataQuery getBookingCollectionEntryQuery( String carrid, String connid, Date fldate, String bookid)  throws MalformedURLException, UnsupportedEncodingException
    {
		carrid = URLEncoder.encode(carrid, "UTF-8"); 
		connid = URLEncoder.encode(connid, "UTF-8"); 
		bookid = URLEncoder.encode(bookid, "UTF-8"); 

		return new ODataQuery(getBaseUrl() + "BookingCollection("+"carrid='"+carrid+"',connid='"+connid+"',fldate=datetime'"+TypeConverter.convertToString("DateTime",fldate)+"',bookid='"+bookid+"')");
    }

   /**
    * CarrierCollectionQuery with Key
    *
    * @throws MalformedURLException 
    */
    public ODataQuery getCarrierCollectionEntryQuery( String carrid)  throws MalformedURLException, UnsupportedEncodingException
    {
		carrid = URLEncoder.encode(carrid, "UTF-8"); 

		return new ODataQuery(getBaseUrl() + "CarrierCollection("+"carrid='"+carrid+"')");
    }

   /**
    * TravelagencyCollectionQuery with Key
    *
    * @throws MalformedURLException 
    */
    public ODataQuery getTravelagencyCollectionEntryQuery( String agencynum)  throws MalformedURLException, UnsupportedEncodingException
    {
		agencynum = URLEncoder.encode(agencynum, "UTF-8"); 

		return new ODataQuery(getBaseUrl() + "TravelagencyCollection("+"agencynum='"+agencynum+"')");
    }

   /**
    * TravelAgenciesQuery with Key
    *
    * @throws MalformedURLException 
    */
    public ODataQuery getTravelAgenciesEntryQuery( String agencynum)  throws MalformedURLException, UnsupportedEncodingException
    {
		agencynum = URLEncoder.encode(agencynum, "UTF-8"); 

		return new ODataQuery(getBaseUrl() + "TravelAgencies("+"agencynum='"+agencynum+"')");
    }

   /**
    * SubscriptionCollectionQuery with Key
    *
    * @throws MalformedURLException 
    */
    public ODataQuery getSubscriptionCollectionEntryQuery( String ID)  throws MalformedURLException, UnsupportedEncodingException
    {
		ID = URLEncoder.encode(ID, "UTF-8"); 

		return new ODataQuery(getBaseUrl() + "SubscriptionCollection("+"ID='"+ID+"')");
    }

   /**
    * NotificationCollectionQuery with Key
    *
    * @throws MalformedURLException 
    */
    public ODataQuery getNotificationCollectionEntryQuery( String ID)  throws MalformedURLException, UnsupportedEncodingException
    {
		ID = URLEncoder.encode(ID, "UTF-8"); 

		return new ODataQuery(getBaseUrl() + "NotificationCollection("+"ID='"+ID+"')");
    }

   /**
    * FlightCollectionQuery with Key
    *
    * @throws MalformedURLException 
    */
    public ODataQuery getFlightCollectionEntryQuery( String carrid, String connid, Date fldate)  throws MalformedURLException, UnsupportedEncodingException
    {
		carrid = URLEncoder.encode(carrid, "UTF-8"); 
		connid = URLEncoder.encode(connid, "UTF-8"); 

		return new ODataQuery(getBaseUrl() + "FlightCollection("+"carrid='"+carrid+"',connid='"+connid+"',fldate=datetime'"+TypeConverter.convertToString("DateTime",fldate)+"')");
    }
	 
	
	/**
	 * @return - the BookingCollection
	 * @throws - ParserException
	 * @throws - MalformedURLException 
	 */
	public List<Booking> getBookingCollection(String data) throws ParserException, MalformedURLException
	{
		List<Booking> returnList  = new LinkedList<Booking>();
		List<IODataEntry> list  = parser.parseODataEntries(data, "BookingCollection", schema);
		
		for (IODataEntry isdmoDataEntry : list) 
		{
			returnList.add(new Booking(isdmoDataEntry, parser, schema));
		}
		return returnList;
	 }
	
	/**
	 * @return - the CarrierCollection
	 * @throws - ParserException
	 * @throws - MalformedURLException 
	 */
	public List<Carrier> getCarrierCollection(String data) throws ParserException, MalformedURLException
	{
		List<Carrier> returnList  = new LinkedList<Carrier>();
		List<IODataEntry> list  = parser.parseODataEntries(data, "CarrierCollection", schema);
		
		for (IODataEntry isdmoDataEntry : list) 
		{
			returnList.add(new Carrier(isdmoDataEntry, parser, schema));
		}
		return returnList;
	 }
	
	/**
	 * @return - the TravelagencyCollection
	 * @throws - ParserException
	 * @throws - MalformedURLException 
	 */
	public List<Travelagency> getTravelagencyCollection(String data) throws ParserException, MalformedURLException
	{
		List<Travelagency> returnList  = new LinkedList<Travelagency>();
		List<IODataEntry> list  = parser.parseODataEntries(data, "TravelagencyCollection", schema);
		
		for (IODataEntry isdmoDataEntry : list) 
		{
			returnList.add(new Travelagency(isdmoDataEntry, parser, schema));
		}
		return returnList;
	 }
	
	/**
	 * @return - the TravelAgencies
	 * @throws - ParserException
	 * @throws - MalformedURLException 
	 */
	public List<Travelagency> getTravelAgencies(String data) throws ParserException, MalformedURLException
	{
		List<Travelagency> returnList  = new LinkedList<Travelagency>();
		List<IODataEntry> list  = parser.parseODataEntries(data, "TravelAgencies", schema);
		
		for (IODataEntry isdmoDataEntry : list) 
		{
			returnList.add(new Travelagency(isdmoDataEntry, parser, schema));
		}
		return returnList;
	 }
	
	/**
	 * @return - the SubscriptionCollection
	 * @throws - ParserException
	 * @throws - MalformedURLException 
	 */
	public List<Subscription> getSubscriptionCollection(String data) throws ParserException, MalformedURLException
	{
		List<Subscription> returnList  = new LinkedList<Subscription>();
		List<IODataEntry> list  = parser.parseODataEntries(data, "SubscriptionCollection", schema);
		
		for (IODataEntry isdmoDataEntry : list) 
		{
			returnList.add(new Subscription(isdmoDataEntry, parser, schema));
		}
		return returnList;
	 }
	
	/**
	 * @return - the NotificationCollection
	 * @throws - ParserException
	 * @throws - MalformedURLException 
	 */
	public List<Notification> getNotificationCollection(String data) throws ParserException, MalformedURLException
	{
		List<Notification> returnList  = new LinkedList<Notification>();
		List<IODataEntry> list  = parser.parseODataEntries(data, "NotificationCollection", schema);
		
		for (IODataEntry isdmoDataEntry : list) 
		{
			returnList.add(new Notification(isdmoDataEntry, parser, schema));
		}
		return returnList;
	 }
	
	/**
	 * @return - the FlightCollection
	 * @throws - ParserException
	 * @throws - MalformedURLException 
	 */
	public List<Flight> getFlightCollection(String data) throws ParserException, MalformedURLException
	{
		List<Flight> returnList  = new LinkedList<Flight>();
		List<IODataEntry> list  = parser.parseODataEntries(data, "FlightCollection", schema);
		
		for (IODataEntry isdmoDataEntry : list) 
		{
			returnList.add(new Flight(isdmoDataEntry, parser, schema));
		}
		return returnList;
	 }

		
		
	/**
	 * @return - Booking when sending the key of Booking
	 * @throws - ParserException
	 * @throws MalformedURLException
	 */
	public Booking getBookingCollectionEntry(String data) throws ParserException, MalformedURLException
	{
		List<IODataEntry> list = parser.parseODataEntries(data, "BookingCollection", schema);
		return new Booking(list.get(0), parser, schema);
	}
		
		
	/**
	 * @return - Carrier when sending the key of Carrier
	 * @throws - ParserException
	 * @throws MalformedURLException
	 */
	public Carrier getCarrierCollectionEntry(String data) throws ParserException, MalformedURLException
	{
		List<IODataEntry> list = parser.parseODataEntries(data, "CarrierCollection", schema);
		return new Carrier(list.get(0), parser, schema);
	}
		
		
	/**
	 * @return - Travelagency when sending the key of Travelagency
	 * @throws - ParserException
	 * @throws MalformedURLException
	 */
	public Travelagency getTravelagencyCollectionEntry(String data) throws ParserException, MalformedURLException
	{
		List<IODataEntry> list = parser.parseODataEntries(data, "TravelagencyCollection", schema);
		return new Travelagency(list.get(0), parser, schema);
	}
		
		
	/**
	 * @return - Travelagency when sending the key of Travelagency
	 * @throws - ParserException
	 * @throws MalformedURLException
	 */
	public Travelagency getTravelAgenciesEntry(String data) throws ParserException, MalformedURLException
	{
		List<IODataEntry> list = parser.parseODataEntries(data, "TravelAgencies", schema);
		return new Travelagency(list.get(0), parser, schema);
	}
		
		
	/**
	 * @return - Subscription when sending the key of Subscription
	 * @throws - ParserException
	 * @throws MalformedURLException
	 */
	public Subscription getSubscriptionCollectionEntry(String data) throws ParserException, MalformedURLException
	{
		List<IODataEntry> list = parser.parseODataEntries(data, "SubscriptionCollection", schema);
		return new Subscription(list.get(0), parser, schema);
	}
		
		
	/**
	 * @return - Notification when sending the key of Notification
	 * @throws - ParserException
	 * @throws MalformedURLException
	 */
	public Notification getNotificationCollectionEntry(String data) throws ParserException, MalformedURLException
	{
		List<IODataEntry> list = parser.parseODataEntries(data, "NotificationCollection", schema);
		return new Notification(list.get(0), parser, schema);
	}
		
		
	/**
	 * @return - Flight when sending the key of Flight
	 * @throws - ParserException
	 * @throws MalformedURLException
	 */
	public Flight getFlightCollectionEntry(String data) throws ParserException, MalformedURLException
	{
		List<IODataEntry> list = parser.parseODataEntries(data, "FlightCollection", schema);
		return new Flight(list.get(0), parser, schema);
	}

// service function imports

   /**
    * CheckFlightAvailability function import Query
    *
    * @param airlineid
    * @param connectionid
    * @param flightdate
    * @return - the CheckFlightAvailabilityQuery
    * @throws - MalformedURLException, UnsupportedEncodingException  
    */
    public ODataQuery CheckFlightAvailabilityQuery(String airlineid, String connectionid, Date flightdate)  throws MalformedURLException, UnsupportedEncodingException 
    {
		ODataQuery query = new ODataQuery(getBaseUrl() + "CheckFlightAvailability");
	    query.addParameter("airlineid", String.valueOf("'"+airlineid+"'"));
	    query.addParameter("connectionid", String.valueOf("'"+connectionid+"'"));
	    query.addParameter("flightdate", String.valueOf("datetime'" + TypeConverter.convertToString("DateTime",flightdate) + "'"));
        return query;
	}
	
	
	/**
	 * Get CheckFlightAvailability function import 
	 *
	 * @return - FlightAvailability
	 * @throws - ParserException 
	 * @throws - IllegalArgumentException
	 * @throws MalformedURLException 
	 */
	public FlightAvailability CheckFlightAvailability(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		FlightAvailability returnValue = null;
			
         List<IODataFunctionImport> functionImports = getSchema().getFunctionImports();
		 IODataFunctionImport functionImport = null;
		 
		 for (IODataFunctionImport isdmoDataFunctionImport : functionImports) 
		 {
			if(isdmoDataFunctionImport.getName().equals("CheckFlightAvailability"))
			{
				functionImport = isdmoDataFunctionImport;
			}
		 }
	 
		 List<IODataEntry> list  = parser.parseFunctionImportResult(data, functionImport, schema);
		 IODataProperty isdmoDataProperty = list.get(0).getPropertiesData().get(0);
		 returnValue = new FlightAvailability(isdmoDataProperty);
		 return returnValue;
	}

   /**
    * GetAvailableFlights function import Query
    *
    * @param fromdate
    * @param todate
    * @param cityfrom
    * @param cityto
    * @return - the GetAvailableFlightsQuery
    * @throws - MalformedURLException, UnsupportedEncodingException  
    */
    public ODataQuery GetAvailableFlightsQuery(Date fromdate, Date todate, String cityfrom, String cityto)  throws MalformedURLException, UnsupportedEncodingException 
    {
		ODataQuery query = new ODataQuery(getBaseUrl() + "GetAvailableFlights");
	    query.addParameter("fromdate", String.valueOf("datetime'" + TypeConverter.convertToString("DateTime",fromdate) + "'"));
	    query.addParameter("todate", String.valueOf("datetime'" + TypeConverter.convertToString("DateTime",todate) + "'"));
	    query.addParameter("cityfrom", String.valueOf("'"+cityfrom+"'"));
	    query.addParameter("cityto", String.valueOf("'"+cityto+"'"));
        return query;
	}
	
	
	/**
	 * Get GetAvailableFlights function import 
	 *
	 * @return - List&ltFlight&gt
	 * @throws - ParserException 
	 * @throws - IllegalArgumentException
	 * @throws MalformedURLException 
	 */
	public List<Flight> GetAvailableFlights(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		List<Flight> returnValue  = new LinkedList<Flight>();
			
         List<IODataFunctionImport> functionImports = getSchema().getFunctionImports();
		 IODataFunctionImport functionImport = null;
		 
		 for (IODataFunctionImport isdmoDataFunctionImport : functionImports) 
		 {
			if(isdmoDataFunctionImport.getName().equals("GetAvailableFlights"))
			{
				functionImport = isdmoDataFunctionImport;
			}
		 }
		 
         List<IODataEntry> list  = parser.parseFunctionImportResult(data, functionImport, schema);

	    for (IODataEntry isdmoDataEntry : list) 
	    {
		    returnValue.add(new Flight(isdmoDataEntry, parser, schema));
	    }
		 return returnValue;
	}

   /**
    * GetFlightDetails function import Query
    *
    * @param airlineid
    * @param connectionid
    * @return - the GetFlightDetailsQuery
    * @throws - MalformedURLException, UnsupportedEncodingException  
    */
    public ODataQuery GetFlightDetailsQuery(String airlineid, String connectionid)  throws MalformedURLException, UnsupportedEncodingException 
    {
		ODataQuery query = new ODataQuery(getBaseUrl() + "GetFlightDetails");
	    query.addParameter("airlineid", String.valueOf("'"+airlineid+"'"));
	    query.addParameter("connectionid", String.valueOf("'"+connectionid+"'"));
        return query;
	}
	
	
	/**
	 * Get GetFlightDetails function import 
	 *
	 * @return - FlightDetails
	 * @throws - ParserException 
	 * @throws - IllegalArgumentException
	 * @throws MalformedURLException 
	 */
	public FlightDetails GetFlightDetails(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		FlightDetails returnValue = null;
			
         List<IODataFunctionImport> functionImports = getSchema().getFunctionImports();
		 IODataFunctionImport functionImport = null;
		 
		 for (IODataFunctionImport isdmoDataFunctionImport : functionImports) 
		 {
			if(isdmoDataFunctionImport.getName().equals("GetFlightDetails"))
			{
				functionImport = isdmoDataFunctionImport;
			}
		 }
	 
		 List<IODataEntry> list  = parser.parseFunctionImportResult(data, functionImport, schema);
		 IODataProperty isdmoDataProperty = list.get(0).getPropertiesData().get(0);
		 returnValue = new FlightDetails(isdmoDataProperty);
		 return returnValue;
	}

   /**
    * GetAgencyDetails function import Query
    *
    * @param agency_id
    * @return - the GetAgencyDetailsQuery
    * @throws - MalformedURLException, UnsupportedEncodingException  
    */
    public ODataQuery GetAgencyDetailsQuery(String agency_id)  throws MalformedURLException, UnsupportedEncodingException 
    {
		ODataQuery query = new ODataQuery(getBaseUrl() + "GetAgencyDetails");
	    query.addParameter("agency_id", String.valueOf("'"+agency_id+"'"));
        return query;
	}
	
	
	/**
	 * Get GetAgencyDetails function import 
	 *
	 * @return - Travelagency
	 * @throws - ParserException 
	 * @throws - IllegalArgumentException
	 * @throws MalformedURLException 
	 */
	public Travelagency GetAgencyDetails(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		Travelagency returnValue = null;
			
         List<IODataFunctionImport> functionImports = getSchema().getFunctionImports();
		 IODataFunctionImport functionImport = null;
		 
		 for (IODataFunctionImport isdmoDataFunctionImport : functionImports) 
		 {
			if(isdmoDataFunctionImport.getName().equals("GetAgencyDetails"))
			{
				functionImport = isdmoDataFunctionImport;
			}
		 }
         List<IODataEntry> list  = parser.parseFunctionImportResult(data, functionImport, schema);
		 returnValue = new Travelagency(list.get(0), parser, schema);
		 return returnValue;
	}

   /**
    * UpdateAgencyPhoneNo function import Query
    *
    * @param agency_id
    * @param telephone
    * @return - the UpdateAgencyPhoneNoQuery
    * @throws - MalformedURLException, UnsupportedEncodingException  
    */
    public ODataQuery UpdateAgencyPhoneNoQuery(String agency_id, String telephone)  throws MalformedURLException, UnsupportedEncodingException 
    {
		ODataQuery query = new ODataQuery(getBaseUrl() + "UpdateAgencyPhoneNo");
	    query.addParameter("agency_id", String.valueOf("'"+agency_id+"'"));
	    query.addParameter("telephone", String.valueOf("'"+telephone+"'"));
        return query;
	}
	
	
	/**
	 * Get UpdateAgencyPhoneNo function import 
	 *
	 * @return - Travelagency
	 * @throws - ParserException 
	 * @throws - IllegalArgumentException
	 * @throws MalformedURLException 
	 */
	public Travelagency UpdateAgencyPhoneNo(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		Travelagency returnValue = null;
			
         List<IODataFunctionImport> functionImports = getSchema().getFunctionImports();
		 IODataFunctionImport functionImport = null;
		 
		 for (IODataFunctionImport isdmoDataFunctionImport : functionImports) 
		 {
			if(isdmoDataFunctionImport.getName().equals("UpdateAgencyPhoneNo"))
			{
				functionImport = isdmoDataFunctionImport;
			}
		 }
         List<IODataEntry> list  = parser.parseFunctionImportResult(data, functionImport, schema);
		 returnValue = new Travelagency(list.get(0), parser, schema);
		 return returnValue;
	}
} 

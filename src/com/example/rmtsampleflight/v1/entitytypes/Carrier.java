package com.example.rmtsampleflight.v1.entitytypes;
/*

 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1

*/
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.sap.gwpa.proxy.BaseEntityType;
import com.sap.gwpa.proxy.MediaLink;
import com.sap.gwpa.proxy.ODataQuery;
import com.sap.gwpa.proxy.TypeConverter;
import com.sap.gwpa.proxy.connectivity.ConnectivitySettings;
import com.sap.gwpa.proxy.connectivity.SUPHelper;
import com.sap.gwpa.proxy.connectivity.SUPHelperException;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataProperty;
import com.sap.mobile.lib.parser.IODataSchema;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.IParser;
import com.sap.mobile.lib.parser.ParserException;

/**
 * Carrier Entity Type 
 *
 * <br>key (carrid)
 */
public class Carrier extends BaseEntityType 
{
	// Carrier properties
    private String carrid;
    private String CARRNAME;
    private String CURRCODE;
    private String URL;
    private String mimeType;

    private MediaLink mediaLinkRead;
    private MediaLink mediaLinkEdit;

	// reference to the parser
	private IParser parser;
	// reference to the schema
	private IODataSchema schema;

	private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

	// Carrier navigation properties
	private  List<Flight> carrierflights = null;

	private static Map<String, String> carrierLabels;

	private static Map<String, String> carrierTypes;	
	
	/**
	 * Constructor
	 * @param entry
	 * @throws MalformedURLException
	 */
	public Carrier(final IODataEntry entry, IParser parser, IODataSchema schema) throws MalformedURLException
	{
		super(entry);
		this.carrid =  TypeConverter.getAsString(entry.getPropertyValue("carrid"));
		this.CARRNAME =  TypeConverter.getAsString(entry.getPropertyValue("CARRNAME"));
		this.CURRCODE =  TypeConverter.getAsString(entry.getPropertyValue("CURRCODE"));
		this.URL =  TypeConverter.getAsString(entry.getPropertyValue("URL"));
		this.mimeType =  TypeConverter.getAsString(entry.getPropertyValue("mimeType"));
	    this.parser = parser;
        this.schema = schema;
    	loadMediaLinkProperties();
 	}
	

	// Carrier navigation properties

	/**
	 * carrierFlights Query
	 * @return - ODataQuery
	 * @throws - MalformedURLException
	 */
	public ODataQuery carrierFlightsQuery() throws MalformedURLException
	{
		String url = getEntry().getId() + "/" + "carrierFlights";
		ODataQuery query = new ODataQuery(url);
		
		return query;
	}

	/**
	 * Get carrierFlights  
	 * @return - List&ltFlight&gt
	 * @throws - IllegalArgumentException, ParserException, MalformedURLException
	 */
	public List<Flight> carrierFlights(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		List<Flight> result = null;
			
		List<IODataEntry> parsedSDMODataEntries = getParsedSDMODataEntries(data, parser, schema, "Carrier","carrierFlights");	


		result = new LinkedList<Flight>(); 
	
		for (IODataEntry entry : parsedSDMODataEntries)
		{
			result.add(new Flight(entry, parser, schema));
		}
        return result;
	}


	/**
	 * carrierFlights Load method
	 *
	 * loads the navigation property entries into the entityType
	 * @throws ParserException 
	 * @throws IllegalArgumentException
	 * @throws MalformedURLException
	 *
	 */
	public void loadCarrierFlights(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		List<Flight> semanticData = carrierFlights(data);
		setCarrierFlights(semanticData);
	}

	// Carrier properties getters and setters
		
	/**
	 * @return - String Airline
	 */
	public String getCarrid()
	{
		return this.carrid;
	}
	
	/**
	 * @param carrid - Airline
	 */
	public void setCarrid(String carrid)
	{
		this.carrid = carrid;
		
		getEntry().putPropertyValue("carrid", carrid);
	}
		
	/**
	 * @return - String Airline
	 */
	public String getCARRNAME()
	{
		return this.CARRNAME;
	}
	
	/**
	 * @param CARRNAME - Airline
	 */
	public void setCARRNAME(String CARRNAME)
	{
		this.CARRNAME = CARRNAME;
		
		getEntry().putPropertyValue("CARRNAME", CARRNAME);
	}
		
	/**
	 * @return - String Airline Currency
	 */
	public String getCURRCODE()
	{
		return this.CURRCODE;
	}
	
	/**
	 * @param CURRCODE - Airline Currency
	 */
	public void setCURRCODE(String CURRCODE)
	{
		this.CURRCODE = CURRCODE;
		
		getEntry().putPropertyValue("CURRCODE", CURRCODE);
	}
		
	/**
	 * @return - String URL
	 */
	public String getURL()
	{
		return this.URL;
	}
	
	/**
	 * @param URL - URL
	 */
	public void setURL(String URL)
	{
		this.URL = URL;
		
		getEntry().putPropertyValue("URL", URL);
	}
		
	/**
	 * @return - String MIME Type
	 */
	public String getMimeType()
	{
		return this.mimeType;
	}
	
	/**
	 * @param mimeType - MIME Type
	 */
	public void setMimeType(String mimeType)
	{
		this.mimeType = mimeType;
		
		getEntry().putPropertyValue("mimeType", mimeType);
	}
	
	/**
	 * @return - representation of the Entity Type object in OData4SAP format
	 */
	public String getStringPayload()  
	{
		String xml = null;
		
		xml = getEntry().toXMLString();
			
		return xml;
	}
	
	/**
	 * @return - self ODataQuery object
	 * @throws MalformedURLException 
	 */
	public ODataQuery getEntityQuery() throws MalformedURLException  
	{
		return new ODataQuery(getEntry().getSelfLink().getUrl());
	}
	
	/**
	 * @return - the date format.
	 */
	public DateFormat getDateFormat()
	{
		return this.dateFormat;
	}

	// Carrier navigation properties setters and getters
	
	/**
	 * Returns navigation property
	 * Returns null if was not expanded
	 * @throws MalformedURLException
	 */
	public List<Flight> getCarrierFlights() throws MalformedURLException
	{
		if (null == carrierflights)
		{
			//load InlineEntries for carrierFlights
			List<IODataEntry> inlineEntries  = getInlineEntries(getEntry(),"carrierFlights");

			if (null != inlineEntries) 
			{
				carrierflights = new LinkedList<Flight>();
				for (IODataEntry isdmoDataEntry : inlineEntries) 
				{
					carrierflights.add(new Flight(isdmoDataEntry, parser, schema));
				}
			}
		}
		return carrierflights;
	}

	/**
	 * Sets navigation property
	 * @param carrierflights - the navigation property to set.
	 */
	public void setCarrierFlights(List<Flight> carrierflights) 
	{
		this.carrierflights = carrierflights;
	}
	
    /**
     * Loads the media links properties
     * @throws MalformedURLException
     */
    public void loadMediaLinkProperties() throws MalformedURLException
    {
    	ConnectivitySettings connectivitySettings = ConnectivitySettings.getInstance();
		if (connectivitySettings.isSUPMode())
        {
            try
            {
                this.mediaLinkRead = getMediaLinkForReading(SUPHelper.getServiceUrl());
            } catch (SUPHelperException e)
            {
                throw new MalformedURLException(e.getMessage());
            }
        }
        else
        {
              this.mediaLinkRead = getMediaLinkForReading(schema.getServiceDocument().getBaseUrl());
        }

        this.mediaLinkEdit = getMediaLinkForEditing();
    }

    /**
     * @return the mediaLinkRead
     * @throws MalformedURLException 
     */
    public MediaLink getMediaLinkRead() throws MalformedURLException
    {
        if (this.mediaLinkRead == null)
        {
            return getMediaLinkForReading(schema.getServiceDocument().getBaseUrl());
        }
        return this.mediaLinkRead;
    }

    /**
     * @param mediaLinkRead
     *            the mediaLinkRead to set
     */
    public void setMediaLinkRead(MediaLink mediaLinkRead)
    {
        this.mediaLinkRead = mediaLinkRead;
    }

    /**
     * @return the mediaLinkEdit
     * @throws MalformedURLException 
     */
    public MediaLink getMediaLinkEdit() throws MalformedURLException
    {
        if (this.mediaLinkEdit == null)
        {
            return getMediaLinkForEditing();
        }
        return this.mediaLinkEdit;
    }

    /**
     * @param mediaLinkEdit
     *            the mediaLinkEdit to set
     */
    public void setMediaLinkEdit(MediaLink mediaLinkEdit)
    {
        this.mediaLinkEdit = mediaLinkEdit;
    }

	/**
    * Static method that loads all of the entity type property labels. 
    * This method is called when the service class is initialized.
    * @param service Service document object containing all of the entity type properties.
   	*/	
    public static void loadLabels(IODataServiceDocument service)
    {
    	List<IODataProperty> properties = getSchemaPropertiesFromCollection(service, "CarrierCollection" );
        
    	carrierLabels = new HashMap<String, String>();
    	carrierTypes = new HashMap<String, String>();
    	
    	if (properties != null)
    	{
	        for (IODataProperty property : properties) 
	        {
	        	carrierLabels.put(property.getName(), property.getLabel());
	        	carrierTypes.put(property.getName(), property.getType());
			}
    	}
    }
    
    
    /**
    * Static method that returns the type for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getTypeForProperty(String propertyName)
    {
        return getLabelFromDictionary(carrierTypes, propertyName);
    }
    
    
    /**
    * Static method that returns the label for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getLabelForProperty(String propertyName)
    {
        return getLabelFromDictionary(carrierLabels, propertyName);
    }
}
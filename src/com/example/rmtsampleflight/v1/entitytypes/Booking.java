package com.example.rmtsampleflight.v1.entitytypes;
/*

 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1

*/
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sap.gwpa.proxy.BaseEntityType;
import com.sap.gwpa.proxy.ODataQuery;
import com.sap.gwpa.proxy.TypeConverter;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataProperty;
import com.sap.mobile.lib.parser.IODataSchema;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.IParser;
import com.sap.mobile.lib.parser.ODataEntry;
import com.sap.mobile.lib.parser.ParserException;

/**
 * Booking Entity Type 
 *
 * <br>key (carrid, connid, fldate, bookid)
 */
public class Booking extends BaseEntityType 
{
	// Booking properties
    private String carrid;
    private String connid;
    private Date fldate;
    private String bookid;
    private String CUSTOMID;
    private String CUSTTYPE;
    private String SMOKER;
    private String WUNIT;
    private BigDecimal LUGGWEIGHT;
    private String INVOICE;
    private String CLASS;
    private BigDecimal FORCURAM;
    private String FORCURKEY;
    private BigDecimal LOCCURAM;
    private String LOCCURKEY;
    private Date ORDER_DATE;
    private String COUNTER;
    private String AGENCYNUM;
    private String CANCELLED;
    private String RESERVED;
    private String PASSNAME;
    private String PASSFORM;
    private Date PASSBIRTH;

	// reference to the parser
	private IParser parser;
	// reference to the schema
	private IODataSchema schema;

	private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

	// Booking navigation properties
	private  Flight bookedflight = null;

	private static Map<String, String> bookingLabels;

	private static Map<String, String> bookingTypes;	
	
	/**
	 * Constructor
	 * @param entry
	 * @throws MalformedURLException
	 */
	public Booking(final IODataEntry entry, IParser parser, IODataSchema schema) throws MalformedURLException
	{
		super(entry);
		this.carrid =  TypeConverter.getAsString(entry.getPropertyValue("carrid"));
		this.connid =  TypeConverter.getAsString(entry.getPropertyValue("connid"));
		this.fldate =  TypeConverter.getAsDate(entry.getPropertyValue("fldate"));
		this.bookid =  TypeConverter.getAsString(entry.getPropertyValue("bookid"));
		this.CUSTOMID =  TypeConverter.getAsString(entry.getPropertyValue("CUSTOMID"));
		this.CUSTTYPE =  TypeConverter.getAsString(entry.getPropertyValue("CUSTTYPE"));
		this.SMOKER =  TypeConverter.getAsString(entry.getPropertyValue("SMOKER"));
		this.WUNIT =  TypeConverter.getAsString(entry.getPropertyValue("WUNIT"));
		this.LUGGWEIGHT =  TypeConverter.getAsFloat(entry.getPropertyValue("LUGGWEIGHT"));
		this.INVOICE =  TypeConverter.getAsString(entry.getPropertyValue("INVOICE"));
		this.CLASS =  TypeConverter.getAsString(entry.getPropertyValue("CLASS"));
		this.FORCURAM =  TypeConverter.getAsFloat(entry.getPropertyValue("FORCURAM"));
		this.FORCURKEY =  TypeConverter.getAsString(entry.getPropertyValue("FORCURKEY"));
		this.LOCCURAM =  TypeConverter.getAsFloat(entry.getPropertyValue("LOCCURAM"));
		this.LOCCURKEY =  TypeConverter.getAsString(entry.getPropertyValue("LOCCURKEY"));
		this.ORDER_DATE =  TypeConverter.getAsDate(entry.getPropertyValue("ORDER_DATE"));
		this.COUNTER =  TypeConverter.getAsString(entry.getPropertyValue("COUNTER"));
		this.AGENCYNUM =  TypeConverter.getAsString(entry.getPropertyValue("AGENCYNUM"));
		this.CANCELLED =  TypeConverter.getAsString(entry.getPropertyValue("CANCELLED"));
		this.RESERVED =  TypeConverter.getAsString(entry.getPropertyValue("RESERVED"));
		this.PASSNAME =  TypeConverter.getAsString(entry.getPropertyValue("PASSNAME"));
		this.PASSFORM =  TypeConverter.getAsString(entry.getPropertyValue("PASSFORM"));
		this.PASSBIRTH =  TypeConverter.getAsDate(entry.getPropertyValue("PASSBIRTH"));
	    this.parser = parser;
        this.schema = schema;
 	}
	
	/**
	 * Booking Constructor</br>
	 * Dummy values may apply
	 *
	 */
	public Booking( String carrid, String connid, Date fldate, String bookid) 
	{
		super(new ODataEntry());
		
        this.setCarrid(carrid);
        this.setConnid(connid);
        this.setFldate(fldate);
        this.setBookid(bookid);
	}

	// Booking navigation properties

	/**
	 * bookedFlight Query
	 * @return - ODataQuery
	 * @throws - MalformedURLException
	 */
	public ODataQuery bookedFlightQuery() throws MalformedURLException
	{
		String url = getEntry().getId() + "/" + "bookedFlight";
		ODataQuery query = new ODataQuery(url);
		
		return query;
	}

	/**
	 * Get bookedFlight  
	 * @return - Flight
	 * @throws - IllegalArgumentException, ParserException, MalformedURLException
	 */
	public Flight bookedFlight(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		Flight result = null;
			
		List<IODataEntry> parsedSDMODataEntries = getParsedSDMODataEntries(data, parser, schema, "Booking","bookedFlight");	

	    result = new Flight (parsedSDMODataEntries.get(0), parser, schema);
        return result;
	}


	/**
	 * bookedFlight Load method
	 *
	 * loads the navigation property entries into the entityType
	 * @throws ParserException 
	 * @throws IllegalArgumentException
	 * @throws MalformedURLException
	 *
	 */
	public void loadBookedFlight(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		Flight semanticData = bookedFlight(data);
		setBookedFlight(semanticData);
	}

	// Booking properties getters and setters
		
	/**
	 * @return - String Airline
	 */
	public String getCarrid()
	{
		return this.carrid;
	}
	
	/**
	 * @param carrid - Airline
	 */
	public void setCarrid(String carrid)
	{
		this.carrid = carrid;
		
		getEntry().putPropertyValue("carrid", carrid);
	}
		
	/**
	 * @return - String Flight Number
	 */
	public String getConnid()
	{
		return this.connid;
	}
	
	/**
	 * @param connid - Flight Number
	 */
	public void setConnid(String connid)
	{
		this.connid = connid;
		
		getEntry().putPropertyValue("connid", connid);
	}
		
	/**
	 * @return - Date Date
	 */
	public Date getFldate()
	{
		return this.fldate;
	}
	
	/**
	 * @param fldate - Date
	 */
	public void setFldate(Date fldate)
	{
		this.fldate = fldate;
		
		getEntry().putPropertyValue("fldate", dateFormat.format(fldate));
	}
		
	/**
	 * @return - String Booking number
	 */
	public String getBookid()
	{
		return this.bookid;
	}
	
	/**
	 * @param bookid - Booking number
	 */
	public void setBookid(String bookid)
	{
		this.bookid = bookid;
		
		getEntry().putPropertyValue("bookid", bookid);
	}
		
	/**
	 * @return - String Customer Number
	 */
	public String getCUSTOMID()
	{
		return this.CUSTOMID;
	}
	
	/**
	 * @param CUSTOMID - Customer Number
	 */
	public void setCUSTOMID(String CUSTOMID)
	{
		this.CUSTOMID = CUSTOMID;
		
		getEntry().putPropertyValue("CUSTOMID", CUSTOMID);
	}
		
	/**
	 * @return - String B/P customer
	 */
	public String getCUSTTYPE()
	{
		return this.CUSTTYPE;
	}
	
	/**
	 * @param CUSTTYPE - B/P customer
	 */
	public void setCUSTTYPE(String CUSTTYPE)
	{
		this.CUSTTYPE = CUSTTYPE;
		
		getEntry().putPropertyValue("CUSTTYPE", CUSTTYPE);
	}
		
	/**
	 * @return - String Smoker
	 */
	public String getSMOKER()
	{
		return this.SMOKER;
	}
	
	/**
	 * @param SMOKER - Smoker
	 */
	public void setSMOKER(String SMOKER)
	{
		this.SMOKER = SMOKER;
		
		getEntry().putPropertyValue("SMOKER", SMOKER);
	}
		
	/**
	 * @return - String Unit of measure
	 */
	public String getWUNIT()
	{
		return this.WUNIT;
	}
	
	/**
	 * @param WUNIT - Unit of measure
	 */
	public void setWUNIT(String WUNIT)
	{
		this.WUNIT = WUNIT;
		
		getEntry().putPropertyValue("WUNIT", WUNIT);
	}
		
	/**
	 * @return - BigDecimal Luggage Weight
	 */
	public BigDecimal getLUGGWEIGHT()
	{
		return this.LUGGWEIGHT;
	}
	
	/**
	 * @param LUGGWEIGHT - Luggage Weight
	 */
	public void setLUGGWEIGHT(BigDecimal LUGGWEIGHT)
	{
		this.LUGGWEIGHT = LUGGWEIGHT;
		
		getEntry().putPropertyValue("LUGGWEIGHT",  String.valueOf(this.LUGGWEIGHT.floatValue()));
	}
		
	/**
	 * @return - String Invoice pty.
	 */
	public String getINVOICE()
	{
		return this.INVOICE;
	}
	
	/**
	 * @param INVOICE - Invoice pty.
	 */
	public void setINVOICE(String INVOICE)
	{
		this.INVOICE = INVOICE;
		
		getEntry().putPropertyValue("INVOICE", INVOICE);
	}
		
	/**
	 * @return - String Class
	 */
	public String getCLASS()
	{
		return this.CLASS;
	}
	
	/**
	 * @param CLASS - Class
	 */
	public void setCLASS(String CLASS)
	{
		this.CLASS = CLASS;
		
		getEntry().putPropertyValue("CLASS", CLASS);
	}
		
	/**
	 * @return - BigDecimal Amount
	 */
	public BigDecimal getFORCURAM()
	{
		return this.FORCURAM;
	}
	
	/**
	 * @param FORCURAM - Amount
	 */
	public void setFORCURAM(BigDecimal FORCURAM)
	{
		this.FORCURAM = FORCURAM;
		
		getEntry().putPropertyValue("FORCURAM",  String.valueOf(this.FORCURAM.floatValue()));
	}
		
	/**
	 * @return - String Paymnt currency
	 */
	public String getFORCURKEY()
	{
		return this.FORCURKEY;
	}
	
	/**
	 * @param FORCURKEY - Paymnt currency
	 */
	public void setFORCURKEY(String FORCURKEY)
	{
		this.FORCURKEY = FORCURKEY;
		
		getEntry().putPropertyValue("FORCURKEY", FORCURKEY);
	}
		
	/**
	 * @return - BigDecimal Amount
	 */
	public BigDecimal getLOCCURAM()
	{
		return this.LOCCURAM;
	}
	
	/**
	 * @param LOCCURAM - Amount
	 */
	public void setLOCCURAM(BigDecimal LOCCURAM)
	{
		this.LOCCURAM = LOCCURAM;
		
		getEntry().putPropertyValue("LOCCURAM",  String.valueOf(this.LOCCURAM.floatValue()));
	}
		
	/**
	 * @return - String Airline Currency
	 */
	public String getLOCCURKEY()
	{
		return this.LOCCURKEY;
	}
	
	/**
	 * @param LOCCURKEY - Airline Currency
	 */
	public void setLOCCURKEY(String LOCCURKEY)
	{
		this.LOCCURKEY = LOCCURKEY;
		
		getEntry().putPropertyValue("LOCCURKEY", LOCCURKEY);
	}
		
	/**
	 * @return - Date Booking date
	 */
	public Date getORDER_DATE()
	{
		return this.ORDER_DATE;
	}
	
	/**
	 * @param ORDER_DATE - Booking date
	 */
	public void setORDER_DATE(Date ORDER_DATE)
	{
		this.ORDER_DATE = ORDER_DATE;
		
		getEntry().putPropertyValue("ORDER_DATE", dateFormat.format(ORDER_DATE));
	}
		
	/**
	 * @return - String Sales office
	 */
	public String getCOUNTER()
	{
		return this.COUNTER;
	}
	
	/**
	 * @param COUNTER - Sales office
	 */
	public void setCOUNTER(String COUNTER)
	{
		this.COUNTER = COUNTER;
		
		getEntry().putPropertyValue("COUNTER", COUNTER);
	}
		
	/**
	 * @return - String Agency No.
	 */
	public String getAGENCYNUM()
	{
		return this.AGENCYNUM;
	}
	
	/**
	 * @param AGENCYNUM - Agency No.
	 */
	public void setAGENCYNUM(String AGENCYNUM)
	{
		this.AGENCYNUM = AGENCYNUM;
		
		getEntry().putPropertyValue("AGENCYNUM", AGENCYNUM);
	}
		
	/**
	 * @return - String Cancelation flag
	 */
	public String getCANCELLED()
	{
		return this.CANCELLED;
	}
	
	/**
	 * @param CANCELLED - Cancelation flag
	 */
	public void setCANCELLED(String CANCELLED)
	{
		this.CANCELLED = CANCELLED;
		
		getEntry().putPropertyValue("CANCELLED", CANCELLED);
	}
		
	/**
	 * @return - String Reserved
	 */
	public String getRESERVED()
	{
		return this.RESERVED;
	}
	
	/**
	 * @param RESERVED - Reserved
	 */
	public void setRESERVED(String RESERVED)
	{
		this.RESERVED = RESERVED;
		
		getEntry().putPropertyValue("RESERVED", RESERVED);
	}
		
	/**
	 * @return - String Passenger Name
	 */
	public String getPASSNAME()
	{
		return this.PASSNAME;
	}
	
	/**
	 * @param PASSNAME - Passenger Name
	 */
	public void setPASSNAME(String PASSNAME)
	{
		this.PASSNAME = PASSNAME;
		
		getEntry().putPropertyValue("PASSNAME", PASSNAME);
	}
		
	/**
	 * @return - String Title
	 */
	public String getPASSFORM()
	{
		return this.PASSFORM;
	}
	
	/**
	 * @param PASSFORM - Title
	 */
	public void setPASSFORM(String PASSFORM)
	{
		this.PASSFORM = PASSFORM;
		
		getEntry().putPropertyValue("PASSFORM", PASSFORM);
	}
		
	/**
	 * @return - Date DOB of Passeng.
	 */
	public Date getPASSBIRTH()
	{
		return this.PASSBIRTH;
	}
	
	/**
	 * @param PASSBIRTH - DOB of Passeng.
	 */
	public void setPASSBIRTH(Date PASSBIRTH)
	{
		this.PASSBIRTH = PASSBIRTH;
		
		getEntry().putPropertyValue("PASSBIRTH", dateFormat.format(PASSBIRTH));
	}
	
	/**
	 * @return - representation of the Entity Type object in OData4SAP format
	 */
	public String getStringPayload()  
	{
		String xml = null;
		
		xml = getEntry().toXMLString();
			
		return xml;
	}
	
	/**
	 * @return - self ODataQuery object
	 * @throws MalformedURLException 
	 */
	public ODataQuery getEntityQuery() throws MalformedURLException  
	{
		return new ODataQuery(getEntry().getSelfLink().getUrl());
	}
	
	/**
	 * @return - the date format.
	 */
	public DateFormat getDateFormat()
	{
		return this.dateFormat;
	}

	// Booking navigation properties setters and getters
	
	/**
	 * Returns navigation property
	 * Returns null if was not expanded
	 * @throws MalformedURLException
	 */
	public Flight getBookedFlight() throws MalformedURLException
	{
		if (null == bookedflight)
		{
			//load InlineEntries for bookedFlight
			List<IODataEntry> inlineEntries  = getInlineEntries(getEntry(),"bookedFlight");

			if (null != inlineEntries) 
			{
				bookedflight = new Flight(inlineEntries.get(0), parser, schema);
			}
		}
		return bookedflight;
	}

	/**
	 * Sets navigation property
	 * @param bookedflight - the navigation property to set.
	 */
	public void setBookedFlight(Flight bookedflight) 
	{
		this.bookedflight = bookedflight;
	}
	

	/**
    * Static method that loads all of the entity type property labels. 
    * This method is called when the service class is initialized.
    * @param service Service document object containing all of the entity type properties.
   	*/	
    public static void loadLabels(IODataServiceDocument service)
    {
    	List<IODataProperty> properties = getSchemaPropertiesFromCollection(service, "BookingCollection" );
        
    	bookingLabels = new HashMap<String, String>();
    	bookingTypes = new HashMap<String, String>();
    	
    	if (properties != null)
    	{
	        for (IODataProperty property : properties) 
	        {
	        	bookingLabels.put(property.getName(), property.getLabel());
	        	bookingTypes.put(property.getName(), property.getType());
			}
    	}
    }
    
    
    /**
    * Static method that returns the type for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getTypeForProperty(String propertyName)
    {
        return getLabelFromDictionary(bookingTypes, propertyName);
    }
    
    
    /**
    * Static method that returns the label for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getLabelForProperty(String propertyName)
    {
        return getLabelFromDictionary(bookingLabels, propertyName);
    }
}
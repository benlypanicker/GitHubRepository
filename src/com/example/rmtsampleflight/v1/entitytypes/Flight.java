package com.example.rmtsampleflight.v1.entitytypes;
/*

 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1

*/
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.example.rmtsampleflight.v1.complextypes.FlightDetails;
import com.sap.gwpa.proxy.BaseEntityType;
import com.sap.gwpa.proxy.ODataQuery;
import com.sap.gwpa.proxy.TypeConverter;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataProperty;
import com.sap.mobile.lib.parser.IODataSchema;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.IParser;
import com.sap.mobile.lib.parser.ODataEntry;
import com.sap.mobile.lib.parser.ParserException;

/**
 * Flight Entity Type 
 *
 * <br>key (carrid, connid, fldate)
 */
public class Flight extends BaseEntityType 
{
	// Flight properties
    private FlightDetails flightDetailsValue;
    private String carrid;
    private String connid;
    private Date fldate;
    private BigDecimal PRICE;
    private String CURRENCY;
    private String PLANETYPE;
    private Integer SEATSMAX;
    private Integer SEATSOCC;
    private BigDecimal PAYMENTSUM;
    private Integer SEATSMAX_B;
    private Integer SEATSOCC_B;
    private Integer SEATSMAX_F;
    private Integer SEATSOCC_F;

	// reference to the parser
	private IParser parser;
	// reference to the schema
	private IODataSchema schema;

	private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

	// Flight navigation properties
	private  Booking flightbooking = null;
	private  List<Booking> flightbookings = null;
	private  Carrier flightcarrier = null;

	private static Map<String, String> flightLabels;

	private static Map<String, String> flightTypes;	
	
	/**
	 * Constructor
	 * @param entry
	 * @throws MalformedURLException
	 */
	public Flight(final IODataEntry entry, IParser parser, IODataSchema schema) throws MalformedURLException
	{
		super(entry);
		this.flightDetailsValue =  new FlightDetails(getComplexTypeByName("RMTSAMPLEFLIGHT.FlightDetails",entry.getPropertiesDataWithAttribute( "Type","RMTSAMPLEFLIGHT.FlightDetails")));
		this.carrid =  TypeConverter.getAsString(entry.getPropertyValue("carrid"));
		this.connid =  TypeConverter.getAsString(entry.getPropertyValue("connid"));
		this.fldate =  TypeConverter.getAsDate(entry.getPropertyValue("fldate"));
		this.PRICE =  TypeConverter.getAsFloat(entry.getPropertyValue("PRICE"));
		this.CURRENCY =  TypeConverter.getAsString(entry.getPropertyValue("CURRENCY"));
		this.PLANETYPE =  TypeConverter.getAsString(entry.getPropertyValue("PLANETYPE"));
		this.SEATSMAX =  TypeConverter.getAsInt(entry.getPropertyValue("SEATSMAX"));
		this.SEATSOCC =  TypeConverter.getAsInt(entry.getPropertyValue("SEATSOCC"));
		this.PAYMENTSUM =  TypeConverter.getAsFloat(entry.getPropertyValue("PAYMENTSUM"));
		this.SEATSMAX_B =  TypeConverter.getAsInt(entry.getPropertyValue("SEATSMAX_B"));
		this.SEATSOCC_B =  TypeConverter.getAsInt(entry.getPropertyValue("SEATSOCC_B"));
		this.SEATSMAX_F =  TypeConverter.getAsInt(entry.getPropertyValue("SEATSMAX_F"));
		this.SEATSOCC_F =  TypeConverter.getAsInt(entry.getPropertyValue("SEATSOCC_F"));
	    this.parser = parser;
        this.schema = schema;
 	}
	
	/**
	 * Flight Constructor</br>
	 * Dummy values may apply
	 *
	 */
	public Flight( String carrid, String connid, Date fldate) 
	{
		super(new ODataEntry());
		
        this.setCarrid(carrid);
        this.setConnid(connid);
        this.setFldate(fldate);
	}

	// Flight navigation properties

	/**
	 * flightbooking Query
	 * @return - ODataQuery
	 * @throws - MalformedURLException
	 */
	public ODataQuery flightbookingQuery() throws MalformedURLException
	{
		String url = getEntry().getId() + "/" + "flightbooking";
		ODataQuery query = new ODataQuery(url);
		
		return query;
	}

	/**
	 * Get flightbooking  
	 * @return - Booking
	 * @throws - IllegalArgumentException, ParserException, MalformedURLException
	 */
	public Booking flightbooking(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		Booking result = null;
			
		List<IODataEntry> parsedSDMODataEntries = getParsedSDMODataEntries(data, parser, schema, "Flight","flightbooking");	

	    result = new Booking (parsedSDMODataEntries.get(0), parser, schema);
        return result;
	}

	/**
	 * flightBookings Query
	 * @return - ODataQuery
	 * @throws - MalformedURLException
	 */
	public ODataQuery flightBookingsQuery() throws MalformedURLException
	{
		String url = getEntry().getId() + "/" + "flightBookings";
		ODataQuery query = new ODataQuery(url);
		
		return query;
	}

	/**
	 * Get flightBookings  
	 * @return - List&ltBooking&gt
	 * @throws - IllegalArgumentException, ParserException, MalformedURLException
	 */
	public List<Booking> flightBookings(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		List<Booking> result = null;
			
		List<IODataEntry> parsedSDMODataEntries = getParsedSDMODataEntries(data, parser, schema, "Flight","flightBookings");	


		result = new LinkedList<Booking>(); 
	
		for (IODataEntry entry : parsedSDMODataEntries)
		{
			result.add(new Booking(entry, parser, schema));
		}
        return result;
	}

	/**
	 * FlightCarrier Query
	 * @return - ODataQuery
	 * @throws - MalformedURLException
	 */
	public ODataQuery FlightCarrierQuery() throws MalformedURLException
	{
		String url = getEntry().getId() + "/" + "FlightCarrier";
		ODataQuery query = new ODataQuery(url);
		
		return query;
	}

	/**
	 * Get FlightCarrier  
	 * @return - Carrier
	 * @throws - IllegalArgumentException, ParserException, MalformedURLException
	 */
	public Carrier FlightCarrier(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		Carrier result = null;
			
		List<IODataEntry> parsedSDMODataEntries = getParsedSDMODataEntries(data, parser, schema, "Flight","FlightCarrier");	

	    result = new Carrier (parsedSDMODataEntries.get(0), parser, schema);
        return result;
	}


	/**
	 * flightbooking Load method
	 *
	 * loads the navigation property entries into the entityType
	 * @throws ParserException 
	 * @throws IllegalArgumentException
	 * @throws MalformedURLException
	 *
	 */
	public void loadFlightbooking(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		Booking semanticData = flightbooking(data);
		setFlightbooking(semanticData);
	}

	/**
	 * flightBookings Load method
	 *
	 * loads the navigation property entries into the entityType
	 * @throws ParserException 
	 * @throws IllegalArgumentException
	 * @throws MalformedURLException
	 *
	 */
	public void loadFlightBookings(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		List<Booking> semanticData = flightBookings(data);
		setFlightBookings(semanticData);
	}

	/**
	 * FlightCarrier Load method
	 *
	 * loads the navigation property entries into the entityType
	 * @throws ParserException 
	 * @throws IllegalArgumentException
	 * @throws MalformedURLException
	 *
	 */
	public void loadFlightCarrier(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		Carrier semanticData = FlightCarrier(data);
		setFlightCarrier(semanticData);
	}

	// Flight properties getters and setters
		
	/**
     * @return - FlightDetails flightDetails
	 */
	public FlightDetails getFlightDetails()
	{
		return this.flightDetailsValue;
	}
	
	/**
     * @param flightDetails
	 */
	public void setFlightDetails(FlightDetails flightDetails)
	{
		this.flightDetailsValue = flightDetails;
		
		List<IODataProperty> childPropertiesData = flightDetails.getProperty().getChildPropertiesData();
		for (IODataProperty isdmoDataProperty : childPropertiesData) 
		{
			getEntry().putValue(isdmoDataProperty.getValue(), "content", "properties", "d:flightDetails", "d:" + isdmoDataProperty.getAttribute("Name"));
		}
	}
		
	/**
	 * @return - String Airline
	 */
	public String getCarrid()
	{
		return this.carrid;
	}
	
	/**
	 * @param carrid - Airline
	 */
	public void setCarrid(String carrid)
	{
		this.carrid = carrid;
		
		getEntry().putPropertyValue("carrid", carrid);
	}
		
	/**
	 * @return - String Flight Number
	 */
	public String getConnid()
	{
		return this.connid;
	}
	
	/**
	 * @param connid - Flight Number
	 */
	public void setConnid(String connid)
	{
		this.connid = connid;
		
		getEntry().putPropertyValue("connid", connid);
	}
		
	/**
	 * @return - Date Date
	 */
	public Date getFldate()
	{
		return this.fldate;
	}
	
	/**
	 * @param fldate - Date
	 */
	public void setFldate(Date fldate)
	{
		this.fldate = fldate;
		
		getEntry().putPropertyValue("fldate", dateFormat.format(fldate));
	}
		
	/**
	 * @return - BigDecimal Airfare
	 */
	public BigDecimal getPRICE()
	{
		return this.PRICE;
	}
	
	/**
	 * @param PRICE - Airfare
	 */
	public void setPRICE(BigDecimal PRICE)
	{
		this.PRICE = PRICE;
		
		getEntry().putPropertyValue("PRICE",  String.valueOf(this.PRICE.floatValue()));
	}
		
	/**
	 * @return - String Airline Currency
	 */
	public String getCURRENCY()
	{
		return this.CURRENCY;
	}
	
	/**
	 * @param CURRENCY - Airline Currency
	 */
	public void setCURRENCY(String CURRENCY)
	{
		this.CURRENCY = CURRENCY;
		
		getEntry().putPropertyValue("CURRENCY", CURRENCY);
	}
		
	/**
	 * @return - String Type of the plane
	 */
	public String getPLANETYPE()
	{
		return this.PLANETYPE;
	}
	
	/**
	 * @param PLANETYPE - Type of the plane
	 */
	public void setPLANETYPE(String PLANETYPE)
	{
		this.PLANETYPE = PLANETYPE;
		
		getEntry().putPropertyValue("PLANETYPE", PLANETYPE);
	}
		
	/**
	 * @return - Integer Max. capacity econ.
	 */
	public Integer getSEATSMAX()
	{
		return this.SEATSMAX;
	}
	
	/**
	 * @param SEATSMAX - Max. capacity econ.
	 */
	public void setSEATSMAX(Integer SEATSMAX)
	{
		this.SEATSMAX = SEATSMAX;
		
	}
		
	/**
	 * @return - Integer Occupied econ.
	 */
	public Integer getSEATSOCC()
	{
		return this.SEATSOCC;
	}
	
	/**
	 * @param SEATSOCC - Occupied econ.
	 */
	public void setSEATSOCC(Integer SEATSOCC)
	{
		this.SEATSOCC = SEATSOCC;
		
	}
		
	/**
	 * @return - BigDecimal Total
	 */
	public BigDecimal getPAYMENTSUM()
	{
		return this.PAYMENTSUM;
	}
	
	/**
	 * @param PAYMENTSUM - Total
	 */
	public void setPAYMENTSUM(BigDecimal PAYMENTSUM)
	{
		this.PAYMENTSUM = PAYMENTSUM;
		
		getEntry().putPropertyValue("PAYMENTSUM",  String.valueOf(this.PAYMENTSUM.floatValue()));
	}
		
	/**
	 * @return - Integer Max. capacity bus.
	 */
	public Integer getSEATSMAX_B()
	{
		return this.SEATSMAX_B;
	}
	
	/**
	 * @param SEATSMAX_B - Max. capacity bus.
	 */
	public void setSEATSMAX_B(Integer SEATSMAX_B)
	{
		this.SEATSMAX_B = SEATSMAX_B;
		
	}
		
	/**
	 * @return - Integer Occupied bus.
	 */
	public Integer getSEATSOCC_B()
	{
		return this.SEATSOCC_B;
	}
	
	/**
	 * @param SEATSOCC_B - Occupied bus.
	 */
	public void setSEATSOCC_B(Integer SEATSOCC_B)
	{
		this.SEATSOCC_B = SEATSOCC_B;
		
	}
		
	/**
	 * @return - Integer Max. capacity 1st
	 */
	public Integer getSEATSMAX_F()
	{
		return this.SEATSMAX_F;
	}
	
	/**
	 * @param SEATSMAX_F - Max. capacity 1st
	 */
	public void setSEATSMAX_F(Integer SEATSMAX_F)
	{
		this.SEATSMAX_F = SEATSMAX_F;
		
	}
		
	/**
	 * @return - Integer Occupied 1st
	 */
	public Integer getSEATSOCC_F()
	{
		return this.SEATSOCC_F;
	}
	
	/**
	 * @param SEATSOCC_F - Occupied 1st
	 */
	public void setSEATSOCC_F(Integer SEATSOCC_F)
	{
		this.SEATSOCC_F = SEATSOCC_F;
		
	}
	
	/**
	 * @return - representation of the Entity Type object in OData4SAP format
	 */
	public String getStringPayload()  
	{
		String xml = null;
		
		xml = getEntry().toXMLString();
			
		return xml;
	}
	
	/**
	 * @return - self ODataQuery object
	 * @throws MalformedURLException 
	 */
	public ODataQuery getEntityQuery() throws MalformedURLException  
	{
		return new ODataQuery(getEntry().getSelfLink().getUrl());
	}
	
	/**
	 * @return - the date format.
	 */
	public DateFormat getDateFormat()
	{
		return this.dateFormat;
	}

	// Flight navigation properties setters and getters
	
	/**
	 * Returns navigation property
	 * Returns null if was not expanded
	 * @throws MalformedURLException
	 */
	public Booking getFlightbooking() throws MalformedURLException
	{
		if (null == flightbooking)
		{
			//load InlineEntries for flightbooking
			List<IODataEntry> inlineEntries  = getInlineEntries(getEntry(),"flightbooking");

			if (null != inlineEntries) 
			{
				flightbooking = new Booking(inlineEntries.get(0), parser, schema);
			}
		}
		return flightbooking;
	}

	/**
	 * Sets navigation property
	 * @param flightbooking - the navigation property to set.
	 */
	public void setFlightbooking(Booking flightbooking) 
	{
		this.flightbooking = flightbooking;
	}
	
	/**
	 * Returns navigation property
	 * Returns null if was not expanded
	 * @throws MalformedURLException
	 */
	public List<Booking> getFlightBookings() throws MalformedURLException
	{
		if (null == flightbookings)
		{
			//load InlineEntries for flightBookings
			List<IODataEntry> inlineEntries  = getInlineEntries(getEntry(),"flightBookings");

			if (null != inlineEntries) 
			{
				flightbookings = new LinkedList<Booking>();
				for (IODataEntry isdmoDataEntry : inlineEntries) 
				{
					flightbookings.add(new Booking(isdmoDataEntry, parser, schema));
				}
			}
		}
		return flightbookings;
	}

	/**
	 * Sets navigation property
	 * @param flightbookings - the navigation property to set.
	 */
	public void setFlightBookings(List<Booking> flightbookings) 
	{
		this.flightbookings = flightbookings;
	}
	
	/**
	 * Returns navigation property
	 * Returns null if was not expanded
	 * @throws MalformedURLException
	 */
	public Carrier getFlightCarrier() throws MalformedURLException
	{
		if (null == flightcarrier)
		{
			//load InlineEntries for FlightCarrier
			List<IODataEntry> inlineEntries  = getInlineEntries(getEntry(),"FlightCarrier");

			if (null != inlineEntries) 
			{
				flightcarrier = new Carrier(inlineEntries.get(0), parser, schema);
			}
		}
		return flightcarrier;
	}

	/**
	 * Sets navigation property
	 * @param flightcarrier - the navigation property to set.
	 */
	public void setFlightCarrier(Carrier flightcarrier) 
	{
		this.flightcarrier = flightcarrier;
	}
	

	/**
    * Static method that loads all of the entity type property labels. 
    * This method is called when the service class is initialized.
    * @param service Service document object containing all of the entity type properties.
   	*/	
    public static void loadLabels(IODataServiceDocument service)
    {
    	List<IODataProperty> properties = getSchemaPropertiesFromCollection(service, "FlightCollection" );
        
    	flightLabels = new HashMap<String, String>();
    	flightTypes = new HashMap<String, String>();
    	
    	if (properties != null)
    	{
	        for (IODataProperty property : properties) 
	        {

				if (property.getName().equals("flightDetails"))
	        	{	      	
	        		FlightDetails.loadLabels(service);
	        	}
	        	flightLabels.put(property.getName(), property.getLabel());
	        	flightTypes.put(property.getName(), property.getType());
			}
    	}
    }
    
    
    /**
    * Static method that returns the type for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getTypeForProperty(String propertyName)
    {
        return getLabelFromDictionary(flightTypes, propertyName);
    }
    
    
    /**
    * Static method that returns the label for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getLabelForProperty(String propertyName)
    {
        return getLabelFromDictionary(flightLabels, propertyName);
    }
}
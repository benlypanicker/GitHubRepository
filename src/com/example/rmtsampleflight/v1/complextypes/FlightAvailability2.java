package com.example.rmtsampleflight.v1.complextypes;
/*
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
*/
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sap.gwpa.proxy.BaseEntityType;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataProperty;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.ODataProperty;

/**
 * FlightAvailability2 Complex Type
 */
public class FlightAvailability2 
{
	// FlightAvailability2 properties
    
 	private static Map<String, String> flightavailability2Labels;
	 
    // reference to the IODataProperty object
    private IODataProperty property = null;	
	
	/**
	 * Constructs a new FlightAvailability2 with the given property.
	 * @param property
	 * @throws - ProxyException
	 */
	public FlightAvailability2(IODataProperty property) 
	{
	}


	/**
	 * Constructs a new FlightAvailability2 with the given entry.
	 * @param entry - OData entry.
	 */
	public FlightAvailability2(IODataEntry entry) 
	{

//		this(convertToISDMODataProperty(entry));
	}

	/**
	 * Constructs a new FlightAvailability2
	 */
	public FlightAvailability2() 
	{
		this.property = new ODataProperty();
	}

	/**
	 * Converts IODataEntry to IODataProperty
	 * 
	 * @param isdmoDataEntry
	 * @return IODataProperty
	 */
	@SuppressWarnings("unused")
	private static IODataProperty convertToISDMODataProperty(IODataEntry isdmoDataEntry) 
	{
		if (isdmoDataEntry != null)
		{
			IODataProperty baseProperty  = new ODataProperty();
			for (IODataProperty property : isdmoDataEntry.getPropertiesData()) 
			{
				baseProperty.putChildPropertyData(property);
			}
			
			return baseProperty;
		}
		
		return null;
	}
	
	// FlightAvailability2 properties getters and setters
		
	/**
	 * @return - ODataProperty
	 */
	public IODataProperty getProperty()
	{
		return this.property;
	}
	
	/**
	 * @return - representation of the Complex Type object in OData4SAP format
	 */
	public String getStringPayload()  
	{
		String xml = null;
		
		xml = property.toXMLString();
			
		return xml;
	}
	
	/**
    * Static method that loads all of the entity type property labels.
    * This method is called when the service class is initialized.
    * @param service Service document object containing all of the entity type properties.
   	*/
    public static void loadLabels(IODataServiceDocument service)
    {
    	List<IODataProperty> properties = BaseEntityType.getSchemaPropertiesFromComplexType(service, "FlightAvailability2");
    	
    	flightavailability2Labels = new HashMap<String, String>();
    	
    	if (properties != null)
    	{
	        for (IODataProperty property : properties) 
	        {   
	        	flightavailability2Labels.put(property.getName(), property.getLabel());
			}
    	}
    }
    
    /**
    * Static method that returns the label for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getLabelForProperty(String propertyName)
    {
        return BaseEntityType.getLabelFromDictionary(flightavailability2Labels, propertyName);
    }
}

package com.example.rmtsampleflight.v1.complextypes;
/*
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
*/
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sap.gwpa.proxy.BaseEntityType;
import com.sap.gwpa.proxy.TypeConverter;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataProperty;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.ODataProperty;

/**
 * FlightAvailability Complex Type
 */
public class FlightAvailability 
{
	// FlightAvailability properties
    private Integer ECONOMAX;
    private Integer ECONOFREE;
    private Integer BUSINMAX;
    private Integer BUSINFREE;
    private Integer FIRSTMAX;
    private Integer FIRSTFREE;
    
 	private static Map<String, String> flightavailabilityLabels;
	 
    // reference to the IODataProperty object
    private IODataProperty property = null;	
	
	/**
	 * Constructs a new FlightAvailability with the given property.
	 * @param property
	 * @throws - ProxyException
	 */
	public FlightAvailability(IODataProperty property) 
	{
		if (null != property)
		{
		    if( null != property.getChildPropertyData("ECONOMAX"))
			{
				this.ECONOMAX =  TypeConverter.getAsInt(property.getChildPropertyData("ECONOMAX").getValue());
			}	
		    if( null != property.getChildPropertyData("ECONOFREE"))
			{
				this.ECONOFREE =  TypeConverter.getAsInt(property.getChildPropertyData("ECONOFREE").getValue());
			}	
		    if( null != property.getChildPropertyData("BUSINMAX"))
			{
				this.BUSINMAX =  TypeConverter.getAsInt(property.getChildPropertyData("BUSINMAX").getValue());
			}	
		    if( null != property.getChildPropertyData("BUSINFREE"))
			{
				this.BUSINFREE =  TypeConverter.getAsInt(property.getChildPropertyData("BUSINFREE").getValue());
			}	
		    if( null != property.getChildPropertyData("FIRSTMAX"))
			{
				this.FIRSTMAX =  TypeConverter.getAsInt(property.getChildPropertyData("FIRSTMAX").getValue());
			}	
		    if( null != property.getChildPropertyData("FIRSTFREE"))
			{
				this.FIRSTFREE =  TypeConverter.getAsInt(property.getChildPropertyData("FIRSTFREE").getValue());
			}	
		    this.property = property;	
		}
	}


	/**
	 * Constructs a new FlightAvailability with the given entry.
	 * @param entry - OData entry.
	 */
	public FlightAvailability(IODataEntry entry) 
	{
		this.ECONOMAX =  TypeConverter.getAsInt(entry.getFunctionImportComplexPropertyValue("ECONOMAX"));
		this.ECONOFREE =  TypeConverter.getAsInt(entry.getFunctionImportComplexPropertyValue("ECONOFREE"));
		this.BUSINMAX =  TypeConverter.getAsInt(entry.getFunctionImportComplexPropertyValue("BUSINMAX"));
		this.BUSINFREE =  TypeConverter.getAsInt(entry.getFunctionImportComplexPropertyValue("BUSINFREE"));
		this.FIRSTMAX =  TypeConverter.getAsInt(entry.getFunctionImportComplexPropertyValue("FIRSTMAX"));
		this.FIRSTFREE =  TypeConverter.getAsInt(entry.getFunctionImportComplexPropertyValue("FIRSTFREE"));

//		this(convertToISDMODataProperty(entry));
	}

	/**
	 * Constructs a new FlightAvailability
	 */
	public FlightAvailability() 
	{
		this.property = new ODataProperty();
	}

	/**
	 * Converts IODataEntry to IODataProperty
	 * 
	 * @param isdmoDataEntry
	 * @return IODataProperty
	 */
	@SuppressWarnings("unused")
	private static IODataProperty convertToISDMODataProperty(IODataEntry isdmoDataEntry) 
	{
		if (isdmoDataEntry != null)
		{
			IODataProperty baseProperty  = new ODataProperty();
			for (IODataProperty property : isdmoDataEntry.getPropertiesData()) 
			{
				baseProperty.putChildPropertyData(property);
			}
			
			return baseProperty;
		}
		
		return null;
	}
	
	// FlightAvailability properties getters and setters
		
	/**
	 * @return - Integer Max. capacity econ.
	 */
	public Integer getECONOMAX()
	{
		return this.ECONOMAX;
	}
	
	/**
	 * @param ECONOMAX - Max. capacity econ.
	 */
	public void setECONOMAX(Integer ECONOMAX)
	{
		this.ECONOMAX = ECONOMAX;
		IODataProperty data = new ODataProperty();
		data.putAttribute("ECONOMAX", "Name");
		data.putAttribute("Edm.Int32", "Type");
		data.setValue(TypeConverter.convertToString("Edm.Int32", ECONOMAX));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - Integer Free seats
	 */
	public Integer getECONOFREE()
	{
		return this.ECONOFREE;
	}
	
	/**
	 * @param ECONOFREE - Free seats
	 */
	public void setECONOFREE(Integer ECONOFREE)
	{
		this.ECONOFREE = ECONOFREE;
		IODataProperty data = new ODataProperty();
		data.putAttribute("ECONOFREE", "Name");
		data.putAttribute("Edm.Int32", "Type");
		data.setValue(TypeConverter.convertToString("Edm.Int32", ECONOFREE));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - Integer Max. capacity bus.
	 */
	public Integer getBUSINMAX()
	{
		return this.BUSINMAX;
	}
	
	/**
	 * @param BUSINMAX - Max. capacity bus.
	 */
	public void setBUSINMAX(Integer BUSINMAX)
	{
		this.BUSINMAX = BUSINMAX;
		IODataProperty data = new ODataProperty();
		data.putAttribute("BUSINMAX", "Name");
		data.putAttribute("Edm.Int32", "Type");
		data.setValue(TypeConverter.convertToString("Edm.Int32", BUSINMAX));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - Integer Free seats
	 */
	public Integer getBUSINFREE()
	{
		return this.BUSINFREE;
	}
	
	/**
	 * @param BUSINFREE - Free seats
	 */
	public void setBUSINFREE(Integer BUSINFREE)
	{
		this.BUSINFREE = BUSINFREE;
		IODataProperty data = new ODataProperty();
		data.putAttribute("BUSINFREE", "Name");
		data.putAttribute("Edm.Int32", "Type");
		data.setValue(TypeConverter.convertToString("Edm.Int32", BUSINFREE));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - Integer Max. capacity 1st
	 */
	public Integer getFIRSTMAX()
	{
		return this.FIRSTMAX;
	}
	
	/**
	 * @param FIRSTMAX - Max. capacity 1st
	 */
	public void setFIRSTMAX(Integer FIRSTMAX)
	{
		this.FIRSTMAX = FIRSTMAX;
		IODataProperty data = new ODataProperty();
		data.putAttribute("FIRSTMAX", "Name");
		data.putAttribute("Edm.Int32", "Type");
		data.setValue(TypeConverter.convertToString("Edm.Int32", FIRSTMAX));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - Integer Free seats
	 */
	public Integer getFIRSTFREE()
	{
		return this.FIRSTFREE;
	}
	
	/**
	 * @param FIRSTFREE - Free seats
	 */
	public void setFIRSTFREE(Integer FIRSTFREE)
	{
		this.FIRSTFREE = FIRSTFREE;
		IODataProperty data = new ODataProperty();
		data.putAttribute("FIRSTFREE", "Name");
		data.putAttribute("Edm.Int32", "Type");
		data.setValue(TypeConverter.convertToString("Edm.Int32", FIRSTFREE));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - ODataProperty
	 */
	public IODataProperty getProperty()
	{
		return this.property;
	}
	
	/**
	 * @return - representation of the Complex Type object in OData4SAP format
	 */
	public String getStringPayload()  
	{
		String xml = null;
		
		xml = property.toXMLString();
			
		return xml;
	}
	
	/**
    * Static method that loads all of the entity type property labels.
    * This method is called when the service class is initialized.
    * @param service Service document object containing all of the entity type properties.
   	*/
    public static void loadLabels(IODataServiceDocument service)
    {
    	List<IODataProperty> properties = BaseEntityType.getSchemaPropertiesFromComplexType(service, "FlightAvailability");
    	
    	flightavailabilityLabels = new HashMap<String, String>();
    	
    	if (properties != null)
    	{
	        for (IODataProperty property : properties) 
	        {   
	        	flightavailabilityLabels.put(property.getName(), property.getLabel());
			}
    	}
    }
    
    /**
    * Static method that returns the label for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getLabelForProperty(String propertyName)
    {
        return BaseEntityType.getLabelFromDictionary(flightavailabilityLabels, propertyName);
    }
}

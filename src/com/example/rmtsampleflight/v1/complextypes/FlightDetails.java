package com.example.rmtsampleflight.v1.complextypes;
/*
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
*/
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sap.gwpa.proxy.BaseEntityType;
import com.sap.gwpa.proxy.TypeConverter;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataProperty;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.ODataProperty;

/**
 * FlightDetails Complex Type
 */
public class FlightDetails 
{
	// FlightDetails properties
    private String countryFrom;
    private String cityFrom;
    private String airportFrom;
    private String countryTo;
    private String cityTo;
    private String airportTo;
    private Integer flightTime;
    private String departureTime;
    private String arrivalTime;
    private BigDecimal distance;
    private String distanceUnit;
    private String flightType;
    private String period;
    
 	private static Map<String, String> flightdetailsLabels;
	 
    // reference to the IODataProperty object
    private IODataProperty property = null;	
	
	/**
	 * Constructs a new FlightDetails with the given property.
	 * @param property
	 * @throws - ProxyException
	 */
	public FlightDetails(IODataProperty property) 
	{
		if (null != property)
		{
		    if( null != property.getChildPropertyData("countryFrom"))
			{
				this.countryFrom =  TypeConverter.getAsString(property.getChildPropertyData("countryFrom").getValue());
			}	
		    if( null != property.getChildPropertyData("cityFrom"))
			{
				this.cityFrom =  TypeConverter.getAsString(property.getChildPropertyData("cityFrom").getValue());
			}	
		    if( null != property.getChildPropertyData("airportFrom"))
			{
				this.airportFrom =  TypeConverter.getAsString(property.getChildPropertyData("airportFrom").getValue());
			}	
		    if( null != property.getChildPropertyData("countryTo"))
			{
				this.countryTo =  TypeConverter.getAsString(property.getChildPropertyData("countryTo").getValue());
			}	
		    if( null != property.getChildPropertyData("cityTo"))
			{
				this.cityTo =  TypeConverter.getAsString(property.getChildPropertyData("cityTo").getValue());
			}	
		    if( null != property.getChildPropertyData("airportTo"))
			{
				this.airportTo =  TypeConverter.getAsString(property.getChildPropertyData("airportTo").getValue());
			}	
		    if( null != property.getChildPropertyData("flightTime"))
			{
				this.flightTime =  TypeConverter.getAsInt(property.getChildPropertyData("flightTime").getValue());
			}	
		    if( null != property.getChildPropertyData("departureTime"))
			{
				this.departureTime =  TypeConverter.getAsString(property.getChildPropertyData("departureTime").getValue());
			}	
		    if( null != property.getChildPropertyData("arrivalTime"))
			{
				this.arrivalTime =  TypeConverter.getAsString(property.getChildPropertyData("arrivalTime").getValue());
			}	
		    if( null != property.getChildPropertyData("distance"))
			{
				this.distance =  TypeConverter.getAsFloat(property.getChildPropertyData("distance").getValue());
			}	
		    if( null != property.getChildPropertyData("distanceUnit"))
			{
				this.distanceUnit =  TypeConverter.getAsString(property.getChildPropertyData("distanceUnit").getValue());
			}	
		    if( null != property.getChildPropertyData("flightType"))
			{
				this.flightType =  TypeConverter.getAsString(property.getChildPropertyData("flightType").getValue());
			}	
		    if( null != property.getChildPropertyData("period"))
			{
				this.period =  TypeConverter.getAsString(property.getChildPropertyData("period").getValue());
			}	
		    this.property = property;	
		}
	}


	/**
	 * Constructs a new FlightDetails with the given entry.
	 * @param entry - OData entry.
	 */
	public FlightDetails(IODataEntry entry) 
	{
		this.countryFrom =  TypeConverter.getAsString(entry.getFunctionImportComplexPropertyValue("countryFrom"));
		this.cityFrom =  TypeConverter.getAsString(entry.getFunctionImportComplexPropertyValue("cityFrom"));
		this.airportFrom =  TypeConverter.getAsString(entry.getFunctionImportComplexPropertyValue("airportFrom"));
		this.countryTo =  TypeConverter.getAsString(entry.getFunctionImportComplexPropertyValue("countryTo"));
		this.cityTo =  TypeConverter.getAsString(entry.getFunctionImportComplexPropertyValue("cityTo"));
		this.airportTo =  TypeConverter.getAsString(entry.getFunctionImportComplexPropertyValue("airportTo"));
		this.flightTime =  TypeConverter.getAsInt(entry.getFunctionImportComplexPropertyValue("flightTime"));
		this.departureTime =  TypeConverter.getAsString(entry.getFunctionImportComplexPropertyValue("departureTime"));
		this.arrivalTime =  TypeConverter.getAsString(entry.getFunctionImportComplexPropertyValue("arrivalTime"));
		this.distance =  TypeConverter.getAsFloat(entry.getFunctionImportComplexPropertyValue("distance"));
		this.distanceUnit =  TypeConverter.getAsString(entry.getFunctionImportComplexPropertyValue("distanceUnit"));
		this.flightType =  TypeConverter.getAsString(entry.getFunctionImportComplexPropertyValue("flightType"));
		this.period =  TypeConverter.getAsString(entry.getFunctionImportComplexPropertyValue("period"));

//		this(convertToISDMODataProperty(entry));
	}

	/**
	 * Constructs a new FlightDetails
	 */
	public FlightDetails() 
	{
		this.property = new ODataProperty();
	}

	/**
	 * Converts IODataEntry to IODataProperty
	 * 
	 * @param isdmoDataEntry
	 * @return IODataProperty
	 */
	@SuppressWarnings("unused")
	private static IODataProperty convertToISDMODataProperty(IODataEntry isdmoDataEntry) 
	{
		if (isdmoDataEntry != null)
		{
			IODataProperty baseProperty  = new ODataProperty();
			for (IODataProperty property : isdmoDataEntry.getPropertiesData()) 
			{
				baseProperty.putChildPropertyData(property);
			}
			
			return baseProperty;
		}
		
		return null;
	}
	
	// FlightDetails properties getters and setters
		
	/**
	 * @return - String Country
	 */
	public String getcountryFrom()
	{
		return this.countryFrom;
	}
	
	/**
	 * @param countryFrom - Country
	 */
	public void setcountryFrom(String countryFrom)
	{
		this.countryFrom = countryFrom;
		IODataProperty data = new ODataProperty();
		data.putAttribute("countryFrom", "Name");
		data.putAttribute("Edm.String", "Type");
		data.setValue(TypeConverter.convertToString("Edm.String", countryFrom));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - String Depart.city
	 */
	public String getcityFrom()
	{
		return this.cityFrom;
	}
	
	/**
	 * @param cityFrom - Depart.city
	 */
	public void setcityFrom(String cityFrom)
	{
		this.cityFrom = cityFrom;
		IODataProperty data = new ODataProperty();
		data.putAttribute("cityFrom", "Name");
		data.putAttribute("Edm.String", "Type");
		data.setValue(TypeConverter.convertToString("Edm.String", cityFrom));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - String Dep. airport
	 */
	public String getairportFrom()
	{
		return this.airportFrom;
	}
	
	/**
	 * @param airportFrom - Dep. airport
	 */
	public void setairportFrom(String airportFrom)
	{
		this.airportFrom = airportFrom;
		IODataProperty data = new ODataProperty();
		data.putAttribute("airportFrom", "Name");
		data.putAttribute("Edm.String", "Type");
		data.setValue(TypeConverter.convertToString("Edm.String", airportFrom));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - String Country
	 */
	public String getcountryTo()
	{
		return this.countryTo;
	}
	
	/**
	 * @param countryTo - Country
	 */
	public void setcountryTo(String countryTo)
	{
		this.countryTo = countryTo;
		IODataProperty data = new ODataProperty();
		data.putAttribute("countryTo", "Name");
		data.putAttribute("Edm.String", "Type");
		data.setValue(TypeConverter.convertToString("Edm.String", countryTo));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - String Arrival city
	 */
	public String getcityTo()
	{
		return this.cityTo;
	}
	
	/**
	 * @param cityTo - Arrival city
	 */
	public void setcityTo(String cityTo)
	{
		this.cityTo = cityTo;
		IODataProperty data = new ODataProperty();
		data.putAttribute("cityTo", "Name");
		data.putAttribute("Edm.String", "Type");
		data.setValue(TypeConverter.convertToString("Edm.String", cityTo));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - String Dest. airport
	 */
	public String getairportTo()
	{
		return this.airportTo;
	}
	
	/**
	 * @param airportTo - Dest. airport
	 */
	public void setairportTo(String airportTo)
	{
		this.airportTo = airportTo;
		IODataProperty data = new ODataProperty();
		data.putAttribute("airportTo", "Name");
		data.putAttribute("Edm.String", "Type");
		data.setValue(TypeConverter.convertToString("Edm.String", airportTo));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - Integer Flight time
	 */
	public Integer getflightTime()
	{
		return this.flightTime;
	}
	
	/**
	 * @param flightTime - Flight time
	 */
	public void setflightTime(Integer flightTime)
	{
		this.flightTime = flightTime;
		IODataProperty data = new ODataProperty();
		data.putAttribute("flightTime", "Name");
		data.putAttribute("Edm.Int32", "Type");
		data.setValue(TypeConverter.convertToString("Edm.Int32", flightTime));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - String Departure
	 */
	public String getdepartureTime()
	{
		return this.departureTime;
	}
	
	/**
	 * @param departureTime - Departure
	 */
	public void setdepartureTime(String departureTime)
	{
		this.departureTime = departureTime;
		IODataProperty data = new ODataProperty();
		data.putAttribute("departureTime", "Name");
		data.putAttribute("Edm.Time", "Type");
		data.setValue(TypeConverter.convertToString("Edm.Time", departureTime));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - String Arrival Time
	 */
	public String getarrivalTime()
	{
		return this.arrivalTime;
	}
	
	/**
	 * @param arrivalTime - Arrival Time
	 */
	public void setarrivalTime(String arrivalTime)
	{
		this.arrivalTime = arrivalTime;
		IODataProperty data = new ODataProperty();
		data.putAttribute("arrivalTime", "Name");
		data.putAttribute("Edm.Time", "Type");
		data.setValue(TypeConverter.convertToString("Edm.Time", arrivalTime));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - BigDecimal Distance
	 */
	public BigDecimal getdistance()
	{
		return this.distance;
	}
	
	/**
	 * @param distance - Distance
	 */
	public void setdistance(BigDecimal distance)
	{
		this.distance = distance;
		IODataProperty data = new ODataProperty();
		data.putAttribute("distance", "Name");
		data.putAttribute("Edm.Decimal", "Type");
		data.setValue(TypeConverter.convertToString("Edm.Decimal", distance));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - String Distance in
	 */
	public String getdistanceUnit()
	{
		return this.distanceUnit;
	}
	
	/**
	 * @param distanceUnit - Distance in
	 */
	public void setdistanceUnit(String distanceUnit)
	{
		this.distanceUnit = distanceUnit;
		IODataProperty data = new ODataProperty();
		data.putAttribute("distanceUnit", "Name");
		data.putAttribute("Edm.String", "Type");
		data.setValue(TypeConverter.convertToString("Edm.String", distanceUnit));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - String Charter
	 */
	public String getflightType()
	{
		return this.flightType;
	}
	
	/**
	 * @param flightType - Charter
	 */
	public void setflightType(String flightType)
	{
		this.flightType = flightType;
		IODataProperty data = new ODataProperty();
		data.putAttribute("flightType", "Name");
		data.putAttribute("Edm.String", "Type");
		data.setValue(TypeConverter.convertToString("Edm.String", flightType));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - String n day(s) later
	 */
	public String getperiod()
	{
		return this.period;
	}
	
	/**
	 * @param period - n day(s) later
	 */
	public void setperiod(String period)
	{
		this.period = period;
		IODataProperty data = new ODataProperty();
		data.putAttribute("period", "Name");
		data.putAttribute("Edm.Byte", "Type");
		data.setValue(TypeConverter.convertToString("Edm.Byte", period));
		this.property.putChildPropertyData(data);
	}
		
	/**
	 * @return - ODataProperty
	 */
	public IODataProperty getProperty()
	{
		return this.property;
	}
	
	/**
	 * @return - representation of the Complex Type object in OData4SAP format
	 */
	public String getStringPayload()  
	{
		String xml = null;
		
		xml = property.toXMLString();
			
		return xml;
	}
	
	/**
    * Static method that loads all of the entity type property labels.
    * This method is called when the service class is initialized.
    * @param service Service document object containing all of the entity type properties.
   	*/
    public static void loadLabels(IODataServiceDocument service)
    {
    	List<IODataProperty> properties = BaseEntityType.getSchemaPropertiesFromComplexType(service, "FlightDetails");
    	
    	flightdetailsLabels = new HashMap<String, String>();
    	
    	if (properties != null)
    	{
	        for (IODataProperty property : properties) 
	        {   
	        	flightdetailsLabels.put(property.getName(), property.getLabel());
			}
    	}
    }
    
    /**
    * Static method that returns the label for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getLabelForProperty(String propertyName)
    {
        return BaseEntityType.getLabelFromDictionary(flightdetailsLabels, propertyName);
    }
}
